{"version":3,"file":"CreatableSelectField-wcGtW0py.js","sources":["../../src/field/autocomplete/CreatableSelectField.tsx"],"sourcesContent":["import \"../../form/formSupport\";\n\nimport { ValueState } from \"@ui5/webcomponents-react\";\nimport {\n  ReactElement,\n  Ref,\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { useController } from \"react-hook-form\";\n\nimport {\n  CreatableSelect,\n  CreatableSelectProps,\n} from \"../../component/autocomplete/CreatableSelect\";\nimport { DefaultAutoCompleteOption } from \"../../component/AutoCompleteModel\";\nimport { useI18nValidationError } from \"../../i18n/FormI18n\";\nimport { FormFieldElement, FormFieldValidation } from \"../types\";\nimport { hasError } from \"../util\";\n\nexport type CreatableSelectFieldProps<T = DefaultAutoCompleteOption> = Omit<\n  CreatableSelectProps<T>,\n  \"name\" | \"value\" | \"inputValue\" | \"onChange\" | \"onValueChange\" | \"onBlur\"\n> &\n  Pick<FormFieldValidation, \"required\"> & {\n    name: string;\n  };\n\nexport const CreatableSelectField = forwardRef<\n  FormFieldElement,\n  CreatableSelectFieldProps\n>(({ name, required, ...props }, forwardedRef) => {\n  const rules: Partial<FormFieldValidation> = useMemo(\n    () => ({\n      required,\n    }),\n    [required]\n  );\n\n  const getValidationErrorMessage = useI18nValidationError(name, rules);\n\n  const { field, fieldState } = useController({\n    name: name,\n    rules,\n  });\n\n  // store input ref for intenral usage\n  const internalRef = useRef<HTMLInputElement>();\n  // forward outer ref to custom element\n  useImperativeHandle(forwardedRef, () => ({\n    focus() {\n      if (internalRef.current != null) {\n        internalRef.current.focus();\n      }\n    },\n  }));\n  // forward field ref to stored internal input ref\n  useImperativeHandle(field.ref, () => internalRef.current);\n\n  // get error message (Note: undefined fallbacks to default message of ui5 component)\n  const errorMessage = hasError(fieldState.error)\n    ? getValidationErrorMessage(fieldState.error, field.value)\n    : undefined;\n\n  return (\n    <CreatableSelect\n      {...props}\n      ref={internalRef}\n      name={field.name}\n      value={field.value}\n      onValueChange={field.onChange}\n      valueState={\n        hasError(fieldState.error) ? ValueState.Error : ValueState.None\n      }\n      valueStateMessage={\n        errorMessage != null && (\n          <div slot=\"valueStateMessage\">{errorMessage}</div>\n        )\n      }\n      onBlur={field.onBlur}\n      required={required}\n    />\n  );\n}) as <T = DefaultAutoCompleteOption>(\n  p: CreatableSelectFieldProps<T> & {\n    ref?: Ref<FormFieldElement | undefined>;\n  }\n) => ReactElement;\n"],"names":["CreatableSelectField","forwardRef","name","required","props","forwardedRef","rules","useMemo","getValidationErrorMessage","useI18nValidationError","field","fieldState","useController","internalRef","useRef","useImperativeHandle","errorMessage","hasError","jsx","CreatableSelect","ValueState"],"mappings":"2WA8BO,MAAAA,EAAAC,EAAA,WAAA,CAAA,CAAA,KAAAC,EAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAIL,MAAAC,EAAAC,EAAA,QAA4C,KAAA,CACnC,SAAAJ,CACL,GACF,CAAAA,CAAA,CACS,EAGXK,EAAAC,EAAAP,EAAAI,CAAA,EAEA,CAAA,MAAAI,EAAA,WAAAC,CAAA,EAAAC,EAAA,CAA4C,KAAAV,EAC1C,MAAAI,CACA,CAAA,EAIFO,EAAAC,EAAAA,SAEAC,EAAA,oBAAAV,EAAA,KAAA,CAAyC,OAAA,CAErCQ,EAAA,SAAA,MACEA,EAAA,QAAA,OACF,CACF,EAAA,EAGFE,EAAAA,oBAAAL,EAAA,IAAA,IAAAG,EAAA,OAAA,EAGA,MAAAG,EAAAC,EAAAN,EAAA,KAAA,EAAAH,EAAAG,EAAA,MAAAD,EAAA,KAAA,EAAA,OAIA,OAAAQ,EACEC,EAAC,CAAA,GAAAf,EACK,IAAAS,EACC,KAAAH,EAAA,KACO,MAAAA,EAAA,MACC,cAAAA,EAAA,SACQ,WAAAO,EAAAN,EAAA,KAAA,EAAAS,EAAA,MAAAA,EAAA,KAEwC,kBAAAJ,GAAA,MAAAE,EAAA,MAAA,CAAA,KAAA,oBAAA,SAAAF,EAAA,EAIb,OAAAN,EAAA,OAGlC,SAAAP,CACd,CAAA,CAGN,CAAA;;;;;;;;;;;;;;;;;;;;"}