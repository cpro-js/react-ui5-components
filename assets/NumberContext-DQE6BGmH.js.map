{"version":3,"file":"NumberContext-DQE6BGmH.js","sources":["../../src/component/number/helper/CurrencyHelper.ts","../../src/component/number/helper/NumberFormatter.ts","../../src/component/number/helper/NumberParser.ts","../../src/component/number/helper/NumberWarningMessage.ts","../../src/component/number/BaseNumberInput.tsx","../../src/component/number/context/NumberContext.tsx"],"sourcesContent":["import { NumberFormatter } from \"./NumberFormatter\";\n\nexport const getCurrencyConfig = (\n  toMerge: Intl.NumberFormatOptions = {},\n  currency: string\n) => ({\n  ...toMerge,\n  currency,\n  currencyDisplay: \"code\",\n});\n\nexport const getCurrencyFormatter = (\n  formatter: NumberFormatter,\n  currency: string\n) => {\n  return (val?: number) => {\n    if (!val && val !== 0) {\n      return \"\";\n    }\n\n    const regExp = new RegExp(`\\\\s*${currency}\\\\s*`);\n    return formatter.format(val).replace(regExp, \"\");\n  };\n};\n","export class NumberFormatter {\n  private formatter: Intl.NumberFormat;\n\n  constructor(locale: string, options?: Intl.NumberFormatOptions) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n  }\n\n  public format = (value?: number): string => {\n    return value || value === 0 ? this.formatter.format(value) : \"\";\n  };\n}\n\nconst FORMATTERS: Record<string, NumberFormatter> = {};\n\nexport function getFormatter(\n  locale?: string,\n  options?: Intl.NumberFormatOptions\n) {\n  const loc = locale || \"en\";\n  const key = `${loc}_${\n    options\n      ? Object.entries(options)\n          .map(([key, val]) => `${key}:${val}`)\n          .join(\"_\")\n      : \"\"\n  }`;\n\n  if (!FORMATTERS[key]) {\n    FORMATTERS[key] = new NumberFormatter(loc, options);\n  }\n\n  return FORMATTERS[key];\n}\n","const STATIC_CURRENCY = \"USD\";\n\n/**\n * Source: https://observablehq.com/@mbostock/localized-number-parsing\n *\n * Adapted to TS.\n */\nexport class NumberParser {\n  private group: RegExp | undefined;\n  private decimal: RegExp;\n  private numeral: RegExp;\n  private index: any;\n\n  private currencyAppended: boolean;\n  private decimalSign: string;\n  private groupSign: string | undefined;\n\n  constructor(locale: string) {\n    const prependTest = new Intl.NumberFormat(locale, {\n      style: \"currency\",\n      currency: STATIC_CURRENCY,\n      currencyDisplay: \"code\",\n    }).format(1);\n    this.currencyAppended = !prependTest.startsWith(STATIC_CURRENCY);\n\n    const formatter = new Intl.NumberFormat(locale);\n    const parts = formatter.formatToParts(12345.6);\n    this.decimalSign = parts.find((d) => d.type === \"decimal\")!.value;\n    this.decimal = new RegExp(`[${this.decimalSign}]`);\n    this.groupSign = parts.find((d) => d.type === \"group\")?.value;\n    this.group = this.groupSign\n      ? new RegExp(`[${this.groupSign}]`, \"g\")\n      : undefined;\n\n    const numerals = [\n      ...new Intl.NumberFormat(locale, { useGrouping: false }).format(\n        9876543210\n      ),\n    ].reverse();\n    const index = new Map(numerals.map((d, i) => [d, i]));\n    this.numeral = new RegExp(`[${numerals.join(\"\")}]`, \"g\");\n    this.index = (d: string) => index.get(d);\n  }\n\n  public isCurrencyAppended() {\n    return this.currencyAppended;\n  }\n\n  public getDecimalSeparator() {\n    return this.decimalSign;\n  }\n\n  public getGroupingSeparator() {\n    return this.groupSign;\n  }\n\n  public parse(formattedNumber?: string, allowGroup: boolean = false) {\n    let fn = formattedNumber?.trim();\n    if (!fn) {\n      return undefined;\n    }\n\n    if (allowGroup && this.group) {\n      fn = fn.replace(this.group, \"\");\n    }\n\n    const parsed = Number(\n      fn.replace(this.decimal, \".\").replace(this.numeral, this.index)\n    );\n\n    return parsed || parsed === 0 ? parsed : undefined;\n  }\n}\n\nconst PARSERS: Record<string, NumberParser> = {};\n\nexport function getParser(locale?: string) {\n  const loc = locale || \"en\";\n  if (!PARSERS[loc]) {\n    PARSERS[loc] = new NumberParser(loc);\n  }\n\n  return PARSERS[loc];\n}\n","export enum WarningMessageTypes {\n  MODIFIED = \"MODIFIED\",\n  BLOCKED_WHITESPACE = \"BLOCKED_WHITE_SPACE\",\n  BLOCKED_NEGATIVE_NUMBER = \"BLOCKED_NEGATIVE_NUMBER\",\n  BLOCKED_FRACTION = \"BLOCKED_FRACTION\",\n  BLOCKED_NOT_A_NUMBER = \"BLOCKED_NOT_A_NUMBER\",\n  RESET_NOT_A_NUMBER = \"RESET_NOT_A_NUMBER\",\n  MODIFIED_MAX_FRACTION_DIGITS = \"MODIFIED_MAX_FRACTION_DIGITS\",\n  MODIFIED_MIN_NUMBER = \"MODIFIED_MIN_NUMBER\",\n  MODIFIED_MAX_NUMBER = \"MODIFIED_MAX_NUMBER\",\n}\n\nexport interface NumberWarningMessage {\n  type: WarningMessageTypes;\n  discardedValue: string;\n}\n\n/**\n * Function to provide content for the warning messages shown, when\n * user input has been blocked or modified.\n *\n * @param type one of the predefined message types\n * @param discardedValue the user input which has been discarded\n */\nexport type GetNumberWarningMessage = (\n  type: WarningMessageTypes,\n  discardedValue: string\n) => string;\n\nexport const defaultNumberWarningMessageGetter: GetNumberWarningMessage = (\n  type,\n  discardedValue\n) => {\n  switch (type) {\n    case WarningMessageTypes.BLOCKED_WHITESPACE:\n      return `Your input has been blocked: No whitespace allowed!`;\n    case WarningMessageTypes.BLOCKED_NEGATIVE_NUMBER:\n      return `Your input has been blocked: No negative numbers allowed!`;\n    case WarningMessageTypes.BLOCKED_FRACTION:\n      return `Your input [${discardedValue}] has been blocked: Only integers / whole numbers are allowed.`;\n    case WarningMessageTypes.BLOCKED_NOT_A_NUMBER:\n      return `Your input [${discardedValue}] has been blocked: Would have been an invalid number.`;\n    case WarningMessageTypes.RESET_NOT_A_NUMBER:\n      return `Input has been reset to last value: [${discardedValue}] is not a valid number.`;\n    case WarningMessageTypes.MODIFIED_MAX_FRACTION_DIGITS:\n      return `Rounding has been applied: [${discardedValue}] exceeds maximum number of fraction digits.`;\n    case WarningMessageTypes.MODIFIED_MIN_NUMBER:\n      return `Input has been set to the allowed min value: [${discardedValue}] falls below minimum value.`;\n    case WarningMessageTypes.MODIFIED_MAX_NUMBER:\n      return `Input has been set to the allowed max value: [${discardedValue}] exceeds maximum value.`;\n\n    default:\n      return `Your input has been modified. Discarded value: ${discardedValue}`;\n  }\n};\n","import {\n  Input,\n  InputDomRef,\n  InputType,\n  Ui5CustomEvent,\n  ValueState,\n} from \"@ui5/webcomponents-react\";\nimport {\n  ClipboardEvent,\n  FC,\n  KeyboardEvent,\n  MutableRefObject,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { triggerSubmitOnEnter, useOnChangeWorkaround } from \"../util\";\nimport {\n  getCurrencyConfig,\n  getCurrencyFormatter,\n} from \"./helper/CurrencyHelper\";\nimport { getFormatter } from \"./helper/NumberFormatter\";\nimport { getParser } from \"./helper/NumberParser\";\nimport {\n  NumberWarningMessage,\n  WarningMessageTypes,\n  defaultNumberWarningMessageGetter,\n} from \"./helper/NumberWarningMessage\";\nimport type {\n  CommonNumberInputProps,\n  NumberDisplayConfig,\n  NumberInputConfig,\n} from \"./NumberModel\";\n\nconst getDefinedNumberFormatOptions = (\n  props: BaseNumberInputProps,\n  propNames: Array<string>\n) => {\n  return propNames\n    .filter((pn) => props.hasOwnProperty(pn))\n    .reduce((collector, pn) => {\n      // @ts-ignore: index signature not compatible with defined object shape\n      collector[pn] = props[pn];\n      return collector;\n    }, {});\n};\n\nexport interface BaseNumberInputProps\n  extends CommonNumberInputProps,\n    NumberDisplayConfig,\n    NumberInputConfig {\n  locale: string;\n  currency?: string;\n}\n\nexport const BaseNumberInput = forwardRef<InputDomRef, BaseNumberInputProps>(\n  (props, forwardedRef) => {\n    const {\n      value,\n      onValue,\n      locale,\n      currency,\n      minimumValue = Number.MIN_SAFE_INTEGER,\n      maximumValue = Number.MAX_SAFE_INTEGER,\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      minimumSignificantDigits,\n      maximumSignificantDigits,\n      useGrouping = false,\n      onKeyDown: onKeyDownOriginal,\n      onKeyUp: onKeyUpOriginal,\n      onFocus: onFocusOriginal,\n      onBlur: onBlurOriginal,\n      onPaste: onPasteOriginal,\n      onChange: onChangeOriginal,\n      onMouseEnter: onMouseEnterOriginal,\n      onMouseLeave: onMouseLeaveOriginal,\n      valueState,\n      valueStateMessage,\n      showNumberWarningMessages = true,\n      getNumberWarningMessage = defaultNumberWarningMessageGetter,\n      ...passThrough\n    } = props;\n\n    const isFocusRef = useRef(false);\n    const parser = useMemo(() => getParser(locale), [locale]);\n    const groupingSeparator = parser.getGroupingSeparator();\n    const decimalSeparator = parser.getDecimalSeparator();\n    const lastValueRef = useRef(value);\n    const [message, setMessage] = useState<NumberWarningMessage>();\n    const [inputState, setInputState] = useState(false);\n\n    // store input ref for internal usage\n    const inputRef = useRef<InputDomRef>() as MutableRefObject<InputDomRef>;\n    useImperativeHandle(forwardedRef, () => inputRef.current);\n\n    const inputConfig = useMemo(() => {\n      const result: Intl.NumberFormatOptions = getDefinedNumberFormatOptions(\n        props,\n        [\"maximumFractionDigits\", \"currency\"]\n      );\n      if (currency) {\n        result.style = \"currency\";\n      }\n\n      result.useGrouping = false;\n      return result;\n    }, [maximumFractionDigits, currency]);\n    const displayConfig = useMemo(() => {\n      const result: Intl.NumberFormatOptions = getDefinedNumberFormatOptions(\n        props,\n        [\n          \"minimumIntegerDigits\",\n          \"minimumFractionDigits\",\n          \"maximumFractionDigits\",\n          \"minimumSignificantDigits\",\n          \"maximumSignificantDigits\",\n          \"useGrouping\",\n          \"currency\",\n        ]\n      );\n      if (currency) {\n        result.style = \"currency\";\n      }\n      return result;\n    }, [\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      minimumSignificantDigits,\n      maximumSignificantDigits,\n      useGrouping,\n      currency,\n    ]);\n\n    if (minimumValue > 1) {\n      throw Error(\"MinValue must be between Number.MIN_SAFE_INTEGER and 1!\");\n    } else if (maximumValue < -1) {\n      throw Error(\"MaxValue must be between -1 and Number.MAX_SAFE_INTEGER!\");\n    }\n\n    // Format numbers for input\n    const formatForInput = useMemo(() => {\n      const specialConf: Intl.NumberFormatOptions = {\n        ...inputConfig,\n        // always allow for less then the regular fraction digits while typing\n        minimumIntegerDigits: undefined,\n        minimumFractionDigits: undefined,\n        minimumSignificantDigits: undefined,\n        maximumSignificantDigits: undefined,\n        // grouping would change all the time while typing => always off\n        useGrouping: false,\n      };\n\n      // number input:\n      const formatter = getFormatter(\n        locale,\n        currency ? getCurrencyConfig(specialConf, currency) : specialConf\n      );\n\n      return currency\n        ? getCurrencyFormatter(formatter, currency)\n        : formatter.format;\n    }, [inputConfig, locale]);\n\n    // Format numbers for display\n    const formatForDisplay = useMemo(() => {\n      const conf = currency\n        ? getCurrencyConfig(displayConfig, currency)\n        : displayConfig;\n\n      // number display: grouping is false by default\n      const formatter = getFormatter(locale, {\n        useGrouping: false,\n        ...conf,\n      });\n\n      return currency\n        ? getCurrencyFormatter(formatter, currency)\n        : formatter.format;\n    }, [displayConfig, locale]);\n\n    // number parser with min & max restriction\n    const parseValue = useCallback(\n      (inputValue?: string): number | undefined => {\n        if (!inputValue) {\n          return;\n        }\n\n        // parse the formatted number: max restrictions might apply\n        let result = parser.parse(formatForInput(parser.parse(inputValue)));\n\n        if (result !== undefined && result > maximumValue) {\n          result = maximumValue;\n        }\n        if (result !== undefined && result < minimumValue) {\n          result = minimumValue;\n        }\n\n        return result;\n      },\n      [parser, formatForInput]\n    );\n\n    // current value\n    const currentValueRef = useRef(\n      value !== undefined\n        ? formatForInput(parseValue(String(value)))\n        : undefined\n    );\n\n    // determine maxFracDigits\n    const maxFractionDigits = useMemo(() => {\n      const decimalTest = formatForInput(0.1111111111111111);\n      return decimalTest.length <= 1 ? 0 : decimalTest.length - 2;\n    }, [formatForInput]);\n\n    const onPaste = useCallback(\n      (event: ClipboardEvent<HTMLInputElement>) => {\n        const data = event.clipboardData.getData(\"text\");\n        const parsed = parseValue(data);\n\n        // not a number\n        if (parsed === undefined) {\n          event.preventDefault();\n\n          setMessage({\n            type: WarningMessageTypes.BLOCKED_NOT_A_NUMBER,\n            discardedValue: data,\n          });\n        }\n\n        // allow consumers to use onPaste as well\n        if (onPasteOriginal) {\n          onPasteOriginal(event);\n        }\n      },\n      [parseValue, onPasteOriginal]\n    );\n\n    /**\n     * Prevent invalid data, e.g. not a number.\n     */\n    const onKeyDown = useCallback(\n      (event: KeyboardEvent<HTMLInputElement>) => {\n        const originalValue = event.currentTarget.value;\n\n        let invalidDataMsg: NumberWarningMessage | undefined;\n\n        if (event.code === \"Space\") {\n          invalidDataMsg = {\n            type: WarningMessageTypes.BLOCKED_WHITESPACE,\n            discardedValue: \" \",\n          };\n        } else if (minimumValue === 0 && event.key === \"-\") {\n          invalidDataMsg = {\n            type: WarningMessageTypes.BLOCKED_NEGATIVE_NUMBER,\n            discardedValue: event.key,\n          };\n        } else if (\n          /**\n           * We're only interested in those keys which change our number value\n           * and these consist of a single char.\n           * Control keys / special keys get a descriptive name, i.e. longer than 1 char.\n           *\n           * Special handling:\n           * - key combinations (pressing STRG/ALT simultaneously)\n           */\n          event.key.length === 1 &&\n          !event.ctrlKey &&\n          !event.altKey &&\n          !event.metaKey &&\n          event.key !== \"-\"\n        ) {\n          // note: newValue might not be the real current value,\n          // since selection & current cursor position are not taken into account\n          const newValue = originalValue + event.key;\n          const value = parser.parse(newValue);\n          const isNan = newValue && value === undefined;\n          // not a number\n          if (isNan) {\n            invalidDataMsg = {\n              type: WarningMessageTypes.BLOCKED_NOT_A_NUMBER,\n              discardedValue: event.key,\n            };\n          }\n          // no fraction digits, but fraction sign\n          else if (maxFractionDigits === 0 && event.key === decimalSeparator) {\n            invalidDataMsg = {\n              type: WarningMessageTypes.BLOCKED_FRACTION,\n              discardedValue: event.key,\n            };\n          }\n        }\n\n        // block invalid data input\n        if (invalidDataMsg) {\n          event.preventDefault();\n        }\n\n        // allow consumers to have access to onKeyDown too\n        if (onKeyDownOriginal) {\n          onKeyDownOriginal(event);\n        }\n\n        // update message\n        setMessage(invalidDataMsg ?? undefined);\n      },\n      [parser, maxFractionDigits, decimalSeparator, onKeyDownOriginal]\n    );\n\n    /**\n     * Sets the current value, enables submit via enter and triggers events.\n     */\n    const onKeyUp = useCallback(\n      (event: KeyboardEvent<HTMLInputElement>) => {\n        const originalValue = event.currentTarget.value;\n        const parsedValue = parser.parse(originalValue);\n        const safeValue = parseValue(originalValue);\n\n        let invalidDataMsg: NumberWarningMessage | undefined;\n\n        if (\n          originalValue !== currentValueRef.current &&\n          originalValue !== \"-\"\n        ) {\n          // parsed value is invalid, but the original value has content\n          // => reset to last valid value before the change\n          if (parsedValue === undefined && originalValue !== \"\") {\n            event.currentTarget.value = currentValueRef.current || \"\";\n            invalidDataMsg = {\n              type: WarningMessageTypes.RESET_NOT_A_NUMBER,\n              discardedValue: originalValue,\n            };\n          } else {\n            // too many fraction digits\n            const decIndex = originalValue.indexOf(decimalSeparator);\n            const fracDigits =\n              decIndex < 0 ? 0 : originalValue.length - 1 - decIndex;\n            const tooManyFracs = fracDigits > maxFractionDigits;\n\n            // if parseValue changed the value, then reset the input to our value\n            // corner case for checking tooManyFracs: 1.110 => 1.11\n            if (safeValue !== parsedValue || tooManyFracs) {\n              const isChanged =\n                safeValue !== undefined && parsedValue !== undefined;\n\n              currentValueRef.current = formatForInput(safeValue);\n              event.currentTarget.value = currentValueRef.current || \"\";\n              invalidDataMsg = {\n                type: tooManyFracs\n                  ? WarningMessageTypes.MODIFIED_MAX_FRACTION_DIGITS\n                  : !isChanged\n                  ? WarningMessageTypes.MODIFIED\n                  : safeValue > parsedValue\n                  ? WarningMessageTypes.MODIFIED_MIN_NUMBER\n                  : WarningMessageTypes.MODIFIED_MAX_NUMBER,\n                discardedValue: originalValue,\n              };\n            } else {\n              // set the current value to the changed value\n              currentValueRef.current = originalValue;\n            }\n\n            // fire onInput event after any changed value\n            inputRef.current.fireEvent(\"input\");\n          }\n        }\n\n        if (invalidDataMsg) {\n          setMessage(invalidDataMsg);\n        } else {\n          // allow for submit via enter\n          triggerSubmitOnEnter(event);\n        }\n\n        // allow consumers to have access to onKeyUp too\n        if (onKeyUpOriginal) {\n          onKeyUpOriginal(event, parseValue(currentValueRef.current));\n        }\n      },\n      [parser, decimalSeparator, parseValue, onKeyUpOriginal]\n    );\n\n    const leaveInputState = useCallback(() => {\n      setInputState(false);\n      setMessage(undefined);\n    }, [setInputState, setMessage]);\n\n    const onFocus = useCallback<NonNullable<typeof onFocusOriginal>>(\n      (...args) => {\n        isFocusRef.current = true;\n        setInputState(true);\n\n        if (onFocusOriginal) {\n          onFocusOriginal(...args);\n        }\n      },\n      [setInputState, onFocusOriginal]\n    );\n\n    const onBlur = useCallback<NonNullable<typeof onBlurOriginal>>(\n      (event) => {\n        isFocusRef.current = false;\n        leaveInputState();\n\n        if (onBlurOriginal) {\n          onBlurOriginal(event);\n        }\n      },\n      [leaveInputState, onBlurOriginal]\n    );\n\n    const onChange = useCallback(\n      (event: Ui5CustomEvent<InputDomRef>) => {\n        const val = parseValue(currentValueRef.current);\n\n        // extra method to provide the value as number\n        if (onValue && val !== value) {\n          onValue(val);\n        }\n        if (onChangeOriginal) {\n          onChangeOriginal(event, val);\n        }\n      },\n      [parseValue, value]\n    );\n\n    const onMouseEnter = useCallback<NonNullable<typeof onMouseEnterOriginal>>(\n      (...args) => {\n        setInputState(true);\n        if (onMouseEnterOriginal) {\n          onMouseEnterOriginal(...args);\n        }\n      },\n      [setInputState, onMouseEnterOriginal]\n    );\n\n    const onMouseLeave = useCallback<NonNullable<typeof onMouseLeaveOriginal>>(\n      (...args) => {\n        if (!isFocusRef.current) {\n          leaveInputState();\n        }\n\n        if (onMouseLeaveOriginal) {\n          onMouseLeaveOriginal(...args);\n        }\n      },\n      [leaveInputState, onMouseLeaveOriginal]\n    );\n\n    // support externally set values, required for form reset\n    if (lastValueRef.current !== value) {\n      const val =\n        value !== undefined\n          ? formatForInput(parseValue(String(value)))\n          : undefined;\n      if (val !== currentValueRef.current) {\n        currentValueRef.current = val;\n      }\n    }\n    lastValueRef.current = value;\n\n    // handle warnings\n    const showWarning = showNumberWarningMessages && message;\n    const msgType = showWarning ? ValueState.Warning : valueState;\n    const msg = !showWarning ? (\n      valueStateMessage\n    ) : (\n      <div slot=\"valueStateMessage\">\n        {getNumberWarningMessage(message.type, message.discardedValue)}\n      </div>\n    );\n\n    // the final string value for the input field\n    const formattedValue = inputState\n      ? currentValueRef.current || \"\"\n      : formatForDisplay(parseValue(currentValueRef.current));\n\n    // apply workaround to fix onChange event\n    useOnChangeWorkaround(inputRef, formattedValue);\n\n    return (\n      <Input\n        {...passThrough}\n        type={InputType.Text}\n        inputMode={maxFractionDigits === 0 ? \"numeric\" : \"decimal\"}\n        maxlength={18}\n        ref={inputRef}\n        value={formattedValue}\n        valueState={msgType}\n        valueStateMessage={msg}\n        onKeyDown={onKeyDown}\n        onKeyUp={onKeyUp}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onPaste={onPaste}\n        onChange={onChange}\n      />\n    );\n  }\n);\n","import { FC, createContext, useContext } from \"react\";\n\nimport { CurrencyInputProps } from \"../CurrencyInput\";\nimport { NumberInputProps } from \"../NumberInput\";\nimport { CommonNumberInputProps, NumberDisplayConfig } from \"../NumberModel\";\n\nexport interface NumberContextProps\n  extends NumberDisplayConfig,\n    NumberInputProps,\n    Pick<\n      CommonNumberInputProps,\n      \"showNumberWarningMessages\" | \"getNumberWarningMessage\"\n    >,\n    Pick<CurrencyInputProps, \"currency\" | \"showCurrency\"> {\n  locale: string;\n}\n\nexport const NumberContext = createContext<NumberContextProps>({\n  locale: \"en-US\",\n});\n\nexport interface NumberContextProviderProps\n  extends Partial<NumberContextProps> {}\n\nexport const NumberContextProvider: FC<NumberContextProviderProps> = (\n  props\n) => {\n  const { children, ...context } = props;\n  const existingContext = useContext(NumberContext);\n\n  return (\n    <NumberContext.Provider value={{ ...existingContext, ...context }}>\n      {children}\n    </NumberContext.Provider>\n  );\n};\n"],"names":["getCurrencyConfig","toMerge","currency","getCurrencyFormatter","formatter","val","regExp","NumberFormatter","locale","options","value","FORMATTERS","getFormatter","loc","key","STATIC_CURRENCY","NumberParser","prependTest","parts","d","_a","numerals","index","i","formattedNumber","allowGroup","fn","parsed","PARSERS","getParser","WarningMessageTypes","defaultNumberWarningMessageGetter","type","discardedValue","getDefinedNumberFormatOptions","props","propNames","pn","collector","BaseNumberInput","forwardRef","forwardedRef","onValue","minimumValue","maximumValue","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","useGrouping","onKeyDownOriginal","onKeyUpOriginal","onFocusOriginal","onBlurOriginal","onPasteOriginal","onChangeOriginal","onMouseEnterOriginal","onMouseLeaveOriginal","valueState","valueStateMessage","showNumberWarningMessages","getNumberWarningMessage","passThrough","isFocusRef","useRef","parser","useMemo","decimalSeparator","lastValueRef","message","setMessage","useState","inputState","setInputState","inputRef","useImperativeHandle","inputConfig","result","displayConfig","formatForInput","specialConf","formatForDisplay","conf","parseValue","useCallback","inputValue","currentValueRef","maxFractionDigits","decimalTest","onPaste","event","data","onKeyDown","originalValue","invalidDataMsg","newValue","value2","onKeyUp","parsedValue","safeValue","decIndex","tooManyFracs","isChanged","triggerSubmitOnEnter","leaveInputState","onFocus","args","onBlur","onChange","onMouseEnter","onMouseLeave","showWarning","msgType","ValueState","msg","jsx","formattedValue","useOnChangeWorkaround","Input","InputType","NumberContext","createContext","NumberContextProvider","children","context","existingContext","useContext"],"mappings":"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"}