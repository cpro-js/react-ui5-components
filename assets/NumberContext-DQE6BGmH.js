import{j as G}from"./useIsomorphicLayoutEffect-xRq3KBKR.js";import{r as i}from"./index-9BFB80ap.js";import{t as Me,u as Ne}from"./util-5JWwSdnm.js";import{V as we}from"./ValueState-Qqn7Ekme.js";import{I as De}from"./index-DEsUDRQH.js";import{I as Ce}from"./Input-jvkg1AKt.js";const Y=(t={},n)=>({...t,currency:n,currencyDisplay:"code"}),j=(t,n)=>a=>{if(!a&&a!==0)return"";const u=new RegExp(`\\s*${n}\\s*`);return t.format(a).replace(u,"")};class Oe{constructor(n,a){this.format=u=>u||u===0?this.formatter.format(u):"",this.formatter=new Intl.NumberFormat(n,a)}}const K={};function z(t,n){const a=t||"en",u=`${a}_${n?Object.entries(n).map(([s,o])=>`${s}:${o}`).join("_"):""}`;return K[u]||(K[u]=new Oe(a,n)),K[u]}const J="USD";class Re{constructor(n){var E;const a=new Intl.NumberFormat(n,{style:"currency",currency:J,currencyDisplay:"code"}).format(1);this.currencyAppended=!a.startsWith(J);const s=new Intl.NumberFormat(n).formatToParts(12345.6);this.decimalSign=s.find(p=>p.type==="decimal").value,this.decimal=new RegExp(`[${this.decimalSign}]`),this.groupSign=(E=s.find(p=>p.type==="group"))==null?void 0:E.value,this.group=this.groupSign?new RegExp(`[${this.groupSign}]`,"g"):void 0;const o=[...new Intl.NumberFormat(n,{useGrouping:!1}).format(9876543210)].reverse(),b=new Map(o.map((p,D)=>[p,D]));this.numeral=new RegExp(`[${o.join("")}]`,"g"),this.index=p=>b.get(p)}isCurrencyAppended(){return this.currencyAppended}getDecimalSeparator(){return this.decimalSign}getGroupingSeparator(){return this.groupSign}parse(n,a=!1){let u=n==null?void 0:n.trim();if(!u)return;a&&this.group&&(u=u.replace(this.group,""));const s=Number(u.replace(this.decimal,".").replace(this.numeral,this.index));return s||s===0?s:void 0}}const k={};function Se(t){const n=t||"en";return k[n]||(k[n]=new Re(n)),k[n]}var m=(t=>(t.MODIFIED="MODIFIED",t.BLOCKED_WHITESPACE="BLOCKED_WHITE_SPACE",t.BLOCKED_NEGATIVE_NUMBER="BLOCKED_NEGATIVE_NUMBER",t.BLOCKED_FRACTION="BLOCKED_FRACTION",t.BLOCKED_NOT_A_NUMBER="BLOCKED_NOT_A_NUMBER",t.RESET_NOT_A_NUMBER="RESET_NOT_A_NUMBER",t.MODIFIED_MAX_FRACTION_DIGITS="MODIFIED_MAX_FRACTION_DIGITS",t.MODIFIED_MIN_NUMBER="MODIFIED_MIN_NUMBER",t.MODIFIED_MAX_NUMBER="MODIFIED_MAX_NUMBER",t))(m||{});const Te=(t,n)=>{switch(t){case"BLOCKED_WHITE_SPACE":return"Your input has been blocked: No whitespace allowed!";case"BLOCKED_NEGATIVE_NUMBER":return"Your input has been blocked: No negative numbers allowed!";case"BLOCKED_FRACTION":return`Your input [${n}] has been blocked: Only integers / whole numbers are allowed.`;case"BLOCKED_NOT_A_NUMBER":return`Your input [${n}] has been blocked: Would have been an invalid number.`;case"RESET_NOT_A_NUMBER":return`Input has been reset to last value: [${n}] is not a valid number.`;case"MODIFIED_MAX_FRACTION_DIGITS":return`Rounding has been applied: [${n}] exceeds maximum number of fraction digits.`;case"MODIFIED_MIN_NUMBER":return`Input has been set to the allowed min value: [${n}] falls below minimum value.`;case"MODIFIED_MAX_NUMBER":return`Input has been set to the allowed max value: [${n}] exceeds maximum value.`;default:return`Your input has been modified. Discarded value: ${n}`}},Q=(t,n)=>n.filter(a=>t.hasOwnProperty(a)).reduce((a,u)=>(a[u]=t[u],a),{}),Z=i.forwardRef((t,n)=>{const{value:a,onValue:u,locale:s,currency:o,minimumValue:b=Number.MIN_SAFE_INTEGER,maximumValue:E=Number.MAX_SAFE_INTEGER,minimumIntegerDigits:p,minimumFractionDigits:D,maximumFractionDigits:L,minimumSignificantDigits:te,maximumSignificantDigits:re,useGrouping:ae=!1,onKeyDown:C,onKeyUp:O,onFocus:R,onBlur:S,onPaste:T,onChange:P,onMouseEnter:V,onMouseLeave:F,valueState:ie,valueStateMessage:ue,showNumberWarningMessages:oe=!0,getNumberWarningMessage:se=Te,...le}=t,x=i.useRef(!1),f=i.useMemo(()=>Se(s),[s]);f.getGroupingSeparator();const _=f.getDecimalSeparator(),q=i.useRef(a),[A,I]=i.useState(),[ce,y]=i.useState(!1),M=i.useRef();i.useImperativeHandle(n,()=>M.current);const W=i.useMemo(()=>{const e=Q(t,["maximumFractionDigits","currency"]);return o&&(e.style="currency"),e.useGrouping=!1,e},[L,o]),B=i.useMemo(()=>{const e=Q(t,["minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","useGrouping","currency"]);return o&&(e.style="currency"),e},[p,D,L,te,re,ae,o]);if(b>1)throw Error("MinValue must be between Number.MIN_SAFE_INTEGER and 1!");if(E<-1)throw Error("MaxValue must be between -1 and Number.MAX_SAFE_INTEGER!");const g=i.useMemo(()=>{const e={...W,minimumIntegerDigits:void 0,minimumFractionDigits:void 0,minimumSignificantDigits:void 0,maximumSignificantDigits:void 0,useGrouping:!1},r=z(s,o?Y(e,o):e);return o?j(r,o):r.format},[W,s]),me=i.useMemo(()=>{const e=o?Y(B,o):B,r=z(s,{useGrouping:!1,...e});return o?j(r,o):r.format},[B,s]),d=i.useCallback(e=>{if(!e)return;let r=f.parse(g(f.parse(e)));return r!==void 0&&r>E&&(r=E),r!==void 0&&r<b&&(r=b),r},[f,g]),c=i.useRef(a!==void 0?g(d(String(a))):void 0),N=i.useMemo(()=>{const e=g(.1111111111111111);return e.length<=1?0:e.length-2},[g]),de=i.useCallback(e=>{const r=e.clipboardData.getData("text");d(r)===void 0&&(e.preventDefault(),I({type:m.BLOCKED_NOT_A_NUMBER,discardedValue:r})),T&&T(e)},[d,T]),pe=i.useCallback(e=>{const r=e.currentTarget.value;let l;if(e.code==="Space")l={type:m.BLOCKED_WHITESPACE,discardedValue:" "};else if(b===0&&e.key==="-")l={type:m.BLOCKED_NEGATIVE_NUMBER,discardedValue:e.key};else if(e.key.length===1&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.key!=="-"){const h=r+e.key,v=f.parse(h);h&&v===void 0?l={type:m.BLOCKED_NOT_A_NUMBER,discardedValue:e.key}:N===0&&e.key===_&&(l={type:m.BLOCKED_FRACTION,discardedValue:e.key})}l&&e.preventDefault(),C&&C(e),I(l??void 0)},[f,N,_,C]),fe=i.useCallback(e=>{const r=e.currentTarget.value,l=f.parse(r),h=d(r);let v;if(r!==c.current&&r!=="-")if(l===void 0&&r!=="")e.currentTarget.value=c.current||"",v={type:m.RESET_NOT_A_NUMBER,discardedValue:r};else{const U=r.indexOf(_),H=(U<0?0:r.length-1-U)>N;if(h!==l||H){const _e=h!==void 0&&l!==void 0;c.current=g(h),e.currentTarget.value=c.current||"",v={type:H?m.MODIFIED_MAX_FRACTION_DIGITS:_e?h>l?m.MODIFIED_MIN_NUMBER:m.MODIFIED_MAX_NUMBER:m.MODIFIED,discardedValue:r}}else c.current=r;M.current.fireEvent("input")}v?I(v):Me(e),O&&O(e,d(c.current))},[f,_,d,O]),w=i.useCallback(()=>{y(!1),I(void 0)},[y,I]),ge=i.useCallback((...e)=>{x.current=!0,y(!0),R&&R(...e)},[y,R]),he=i.useCallback(e=>{x.current=!1,w(),S&&S(e)},[w,S]),be=i.useCallback(e=>{const r=d(c.current);u&&r!==a&&u(r),P&&P(e,r)},[d,a]),Ee=i.useCallback((...e)=>{y(!0),V&&V(...e)},[y,V]),ye=i.useCallback((...e)=>{x.current||w(),F&&F(...e)},[w,F]);if(q.current!==a){const e=a!==void 0?g(d(String(a))):void 0;e!==c.current&&(c.current=e)}q.current=a;const $=oe&&A,ve=$?we.Warning:ie,Ie=$?G("div",{slot:"valueStateMessage",children:se(A.type,A.discardedValue)}):ue,X=ce?c.current||"":me(d(c.current));return Ne(M,X),G(De,{...le,type:Ce.Text,inputMode:N===0?"numeric":"decimal",maxlength:18,ref:M,value:X,valueState:ve,valueStateMessage:Ie,onKeyDown:pe,onKeyUp:fe,onFocus:ge,onBlur:he,onMouseEnter:Ee,onMouseLeave:ye,onPaste:de,onChange:be})});try{Z.displayName="BaseNumberInput",Z.__docgenInfo={description:"",displayName:"BaseNumberInput",props:{locale:{defaultValue:null,description:`Locale to use for currency formatting style.
Might have been provided by NumberI18nProvider, otherwise must be set manually via this attribute.
This attribute takes precedence, if also provided by NumberI18nProvider.`,name:"locale",required:!0,type:{name:"string"}},currency:{defaultValue:null,description:"",name:"currency",required:!1,type:{name:"string"}},value:{defaultValue:null,description:`The initial value, if any.
Can also be used to modify the value of the number field.`,name:"value",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:"Modified onChange method, which also supplies the consumer with the parsed number value.",name:"onChange",required:!1,type:{name:"((event: Ui5CustomEvent<InputDomRef, never>, value: number) => void)"}},onValue:{defaultValue:null,description:`Convenience method which behaves like onChange, but only provides the current value as number.
Fired when the value has changed and the user leaves the input field.`,name:"onValue",required:!1,type:{name:"((value?: number) => void)"}},onKeyUp:{defaultValue:null,description:"Modified onKeyUp method, which also supplies the consumer with the parsed number value.",name:"onKeyUp",required:!1,type:{name:"((event: KeyboardEvent<HTMLInputElement>, value: number) => void)"}},showNumberWarningMessages:{defaultValue:null,description:`Warning messages are shown by default, when user input has been blocked, modified, or reset.
Disable or enable that those messages are shown.`,name:"showNumberWarningMessages",required:!1,type:{name:"boolean"}},getNumberWarningMessage:{defaultValue:null,description:`Provide the content of shown warning messages.
Required for proper internationalization.`,name:"getNumberWarningMessage",required:!1,type:{name:"GetNumberWarningMessage"}},minimumValue:{defaultValue:null,description:`Min number allowed for input.
If user enters a lower value it will automatically be set to this min value.

Must be between (including) MAX_NEGATIVE_INTEGER and 1:
any other restriction on input would be impractical.

Min = 0 wouldn't allow any negative numbers.`,name:"minimumValue",required:!1,type:{name:"number"}},maximumValue:{defaultValue:null,description:`Max number allowed for input.
If user enters a higher value it will automatically be set to this max value.

Must be between (including) -1 and MAX_POSITIVE_INTEGER:
any other restriction on input would be impractical.

Max = 0 would only allow for negative numbers
Max = 999 would allow any number up to three digits`,name:"maximumValue",required:!1,type:{name:"number"}}}}}catch{}const ee=i.createContext({locale:"en-US"}),ne=t=>{const{children:n,...a}=t,u=i.useContext(ee);return G(ee.Provider,{value:{...u,...a},children:n})};try{ne.displayName="NumberContextProvider",ne.__docgenInfo={description:"",displayName:"NumberContextProvider",props:{locale:{defaultValue:null,description:`Locale to use for currency formatting style.
Might have been provided by NumberI18nProvider, otherwise must be set manually via this attribute.
This attribute takes precedence, if also provided by NumberI18nProvider.`,name:"locale",required:!1,type:{name:"string"}},value:{defaultValue:null,description:`The initial value, if any.
Can also be used to modify the value of the number field.`,name:"value",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:"Modified onChange method, which also supplies the consumer with the parsed number value.",name:"onChange",required:!1,type:{name:"((event: Ui5CustomEvent<InputDomRef, never>, value: number) => void)"}},onValue:{defaultValue:null,description:`Convenience method which behaves like onChange, but only provides the current value as number.
Fired when the value has changed and the user leaves the input field.`,name:"onValue",required:!1,type:{name:"((value?: number) => void)"}},onKeyUp:{defaultValue:null,description:"Modified onKeyUp method, which also supplies the consumer with the parsed number value.",name:"onKeyUp",required:!1,type:{name:"((event: KeyboardEvent<HTMLInputElement>, value: number) => void)"}},showNumberWarningMessages:{defaultValue:null,description:`Warning messages are shown by default, when user input has been blocked, modified, or reset.
Disable or enable that those messages are shown.`,name:"showNumberWarningMessages",required:!1,type:{name:"boolean"}},getNumberWarningMessage:{defaultValue:null,description:`Provide the content of shown warning messages.
Required for proper internationalization.`,name:"getNumberWarningMessage",required:!1,type:{name:"GetNumberWarningMessage"}},minimumValue:{defaultValue:null,description:`Min number allowed for input.
If user enters a lower value it will automatically be set to this min value.

Must be between (including) MAX_NEGATIVE_INTEGER and 1:
any other restriction on input would be impractical.

Min = 0 wouldn't allow any negative numbers.`,name:"minimumValue",required:!1,type:{name:"number"}},maximumValue:{defaultValue:null,description:`Max number allowed for input.
If user enters a higher value it will automatically be set to this max value.

Must be between (including) -1 and MAX_POSITIVE_INTEGER:
any other restriction on input would be impractical.

Max = 0 would only allow for negative numbers
Max = 999 would allow any number up to three digits`,name:"maximumValue",required:!1,type:{name:"number"}},currency:{defaultValue:null,description:"Three letter ISO code of currency, e.g. EUR or USD",name:"currency",required:!1,type:{name:"string"}},showCurrency:{defaultValue:null,description:"",name:"showCurrency",required:!1,type:{name:"boolean"}}}}}catch{}export{Z as B,ee as N,ne as a};
//# sourceMappingURL=NumberContext-DQE6BGmH.js.map
