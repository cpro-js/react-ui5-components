{"version":3,"file":"DatePickerField-xwAD0aAO.js","sources":["../../src/field/DatePickerField.tsx"],"sourcesContent":["import \"../form/formSupport\";\n\nimport { DatePickerDomRef, ValueState } from \"@ui5/webcomponents-react\";\nimport {\n  FC,\n  forwardRef,\n  useContext,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { FieldError, useController } from \"react-hook-form\";\n\nimport { DatePicker, DatePickerProps } from \"../component/DatePicker\";\nimport { FormAdapterContext } from \"../form/FormAdapter\";\nimport { useI18nValidationError } from \"../i18n/FormI18n\";\nimport { FormFieldElement, FormFieldValidation } from \"./types\";\nimport { hasError } from \"./util\";\n\nconst convertToDateOnly = (\n  value: Date | any,\n  parse: (value: any) => Date | null\n): Date | null => {\n  const temp = value instanceof Date ? value : parse(value);\n  if (temp != null) {\n    return new Date(temp.getFullYear(), temp.getMonth(), temp.getDate());\n  }\n\n  return null;\n};\n\nconst isErrorIgnored = (error: FieldError | undefined) =>\n  // minDate and maxDate errors are already handled by web component -> no need to provide our own error message\n  error != null && (error.type === \"minDate\" || error.type === \"maxDate\");\n\nexport type DatePickerFieldProps = Omit<\n  DatePickerProps,\n  \"name\" | \"value\" | \"onChange\" | \"valueState\" | \"onBlur\"\n> &\n  Pick<FormFieldValidation, \"required\"> & {\n    name: string;\n  };\n\nexport const DatePickerField = forwardRef<\n  FormFieldElement,\n  DatePickerFieldProps\n>(({ name, required, minDate, maxDate, ...props }, forwardedRef) => {\n  const {\n    date: { parse },\n  } = useContext(FormAdapterContext);\n\n  const rules: Partial<FormFieldValidation> = useMemo(\n    () => ({\n      required,\n      validate: {\n        ...(minDate == null\n          ? {}\n          : {\n              minDate: (value?: Date | null) => {\n                if (value == null) {\n                  return true;\n                }\n                const normalizedValue = convertToDateOnly(value, parse);\n                const normalizedMinDate = convertToDateOnly(minDate, parse);\n\n                return (\n                  normalizedValue == null ||\n                  normalizedMinDate == null ||\n                  normalizedValue >= normalizedMinDate\n                );\n              },\n            }),\n        ...(maxDate == null\n          ? {}\n          : {\n              maxDate: (value?: Date | null) => {\n                if (value == null) {\n                  return true;\n                }\n                const normalizedValue = convertToDateOnly(value, parse);\n                const normalizedMaxDate = convertToDateOnly(maxDate, parse);\n\n                return (\n                  normalizedValue == null ||\n                  normalizedMaxDate == null ||\n                  normalizedValue <= normalizedMaxDate\n                );\n              },\n            }),\n      },\n    }),\n    [parse, required, minDate, maxDate]\n  );\n\n  const getValidationErrorMessage = useI18nValidationError(name, rules);\n  const { field, fieldState } = useController({ name, rules });\n\n  // store input ref for intenral usage\n  const internalRef = useRef<DatePickerDomRef>();\n  // forward outer ref to custom element\n  useImperativeHandle(forwardedRef, () => ({\n    focus() {\n      if (internalRef.current != null) {\n        internalRef.current.focus();\n      }\n    },\n  }));\n  // forward field ref to stored internal input ref\n  useImperativeHandle(field.ref, () => internalRef.current);\n\n  // use null to reset value, undefined will be ignored by web component\n  const value = field.value === undefined ? null : field.value;\n\n  // get error message (Note: undefined fallbacks to default message of ui5 component)\n  const errorMessage =\n    hasError(fieldState.error) && !isErrorIgnored(fieldState.error)\n      ? getValidationErrorMessage(fieldState.error, field.value)\n      : undefined;\n\n  return (\n    <DatePicker\n      {...props}\n      ref={internalRef}\n      name={field.name}\n      value={value}\n      minDate={minDate}\n      maxDate={maxDate}\n      onChange={(event, value) =>\n        field.onChange(value != null ? value : undefined)\n      }\n      valueState={\n        hasError(fieldState.error) ? ValueState.Error : ValueState.None\n      }\n      valueStateMessage={\n        errorMessage != null && (\n          <div slot=\"valueStateMessage\">{errorMessage}</div>\n        )\n      }\n      onBlur={field.onBlur}\n      required={required}\n    />\n  );\n});\n"],"names":["convertToDateOnly","value","parse","temp","isErrorIgnored","error","DatePickerField","forwardRef","name","required","minDate","maxDate","props","forwardedRef","useContext","FormAdapterContext","rules","useMemo","value2","normalizedValue","normalizedMinDate","normalizedMaxDate","getValidationErrorMessage","useI18nValidationError","field","fieldState","useController","internalRef","useRef","useImperativeHandle","errorMessage","hasError","jsx","DatePicker","event","ValueState"],"mappings":"0ZAmBA,MAAAA,EAAA,CAAAC,EAAAC,IAAA,CAIE,MAAAC,EAAAF,aAAA,KAAAA,EAAAC,EAAAD,CAAA,EACA,OAAAE,GAAA,KACE,IAAA,KAAAA,EAAA,YAAA,EAAAA,EAAA,WAAAA,EAAA,QAAA,CAAA,EAGF,IACF,EAEAC,EAAAC,GAAwBA,GAAA,OAAAA,EAAA,OAAA,WAAAA,EAAA,OAAA,WAYjBC,EAAAC,EAAAA,WAAA,CAAA,CAAA,KAAAC,EAAA,SAAAC,EAAA,QAAAC,EAAA,QAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAIL,KAAA,CAAM,KAAA,CAAA,MAAAX,CAAA,CACU,EAAAY,EAAAA,WAAAC,CAAA,EAGhBC,EAAAC,EAAA,QAA4C,KAAA,CACnC,SAAAR,EACL,SAAA,CACU,GAAAC,GAAA,KAAA,GAAA,CAGJ,QAAAQ,GAAA,CAEI,GAAAA,GAAA,KACE,MAAA,GAEF,MAAAC,EAAAnB,EAAAkB,EAAAhB,CAAA,EACAkB,EAAApB,EAAAU,EAAAR,CAAA,EAEA,OAAAiB,GAAA,MAAAC,GAAA,MAAAD,GAAAC,CAGqB,CAEvB,EACF,GAAAT,GAAA,KAAA,GAAA,CAGA,QAAAO,GAAA,CAEI,GAAAA,GAAA,KACE,MAAA,GAEF,MAAAC,EAAAnB,EAAAkB,EAAAhB,CAAA,EACAmB,EAAArB,EAAAW,EAAAT,CAAA,EAEA,OAAAiB,GAAA,MAAAE,GAAA,MAAAF,GAAAE,CAGqB,CAEvB,CACF,CACN,GACF,CAAAnB,EAAAO,EAAAC,EAAAC,CAAA,CACkC,EAGpCW,EAAAC,EAAAf,EAAAQ,CAAA,EACA,CAAA,MAAAQ,EAAA,WAAAC,CAAA,EAAAC,EAAA,CAAA,KAAAlB,EAAA,MAAAQ,CAAA,CAAA,EAGAW,EAAAC,EAAAA,SAEAC,EAAA,oBAAAhB,EAAA,KAAA,CAAyC,OAAA,CAErCc,EAAA,SAAA,MACEA,EAAA,QAAA,OACF,CACF,EAAA,EAGFE,EAAAA,oBAAAL,EAAA,IAAA,IAAAG,EAAA,OAAA,EAGA,MAAA1B,EAAAuB,EAAA,QAAA,OAAA,KAAAA,EAAA,MAGAM,EAAAC,EAAAN,EAAA,KAAA,GAAA,CAAArB,EAAAqB,EAAA,KAAA,EAAAH,EAAAG,EAAA,MAAAD,EAAA,KAAA,EAAA,OAKA,OAAAQ,EACEC,EAAC,CAAA,GAAArB,EACK,IAAAe,EACC,KAAAH,EAAA,KACO,MAAAvB,EACZ,QAAAS,EACA,QAAAC,EACA,SAAA,CAAAuB,EAAAhB,IAAAM,EAAA,SAAAN,GAAA,MAAA,EAEkD,WAAAa,EAAAN,EAAA,KAAA,EAAAU,EAAA,MAAAA,EAAA,KAGW,kBAAAL,GAAA,MAAAE,EAAA,MAAA,CAAA,KAAA,oBAAA,SAAAF,EAAA,EAIb,OAAAN,EAAA,OAGlC,SAAAf,CACd,CAAA,CAGN,CAAA"}