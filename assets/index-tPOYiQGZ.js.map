{"version":3,"file":"index-tPOYiQGZ.js","sources":["../../../../node_modules/@ui5/webcomponents-react/dist/components/Text/Text.jss.js","../../../../node_modules/@ui5/webcomponents-react/dist/components/Text/index.js"],"sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base';\nexport const TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%',\n    '&::selection': {\n      background: ThemingParameters.sapSelectedColor,\n      color: ThemingParameters.sapContent_ContrastTextColor\n    }\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  },\n  maxLines: {\n    display: '-webkit-box',\n    WebkitBoxOrient: 'vertical',\n    overflow: 'hidden',\n    WebkitLineClamp: 'var(--_ui5wcr_maxLines)'\n  }\n};","'use client';\n\nimport { clsx } from 'clsx';\nimport React, { forwardRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { TextStyles } from './Text.jss.js';\nconst useStyles = createUseStyles(TextStyles, {\n  name: 'Text'\n});\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text = /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    children,\n    renderWhitespace,\n    wrapping = true,\n    className,\n    style,\n    maxLines,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const classNameString = clsx(classes.text, wrapping === false && classes.noWrap, renderWhitespace && classes.renderWhitespace, typeof maxLines === 'number' && classes.maxLines, className);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    ref: ref,\n    style: {\n      '--_ui5wcr_maxLines': typeof maxLines === 'number' ? maxLines : undefined,\n      ...style\n    },\n    className: classNameString,\n    ...rest\n  }, children);\n});\nText.displayName = 'Text';\nexport { Text };"],"names":["TextStyles","ThemingParameters","useStyles","createUseStyles","Text","forwardRef","props","ref","children","renderWhitespace","wrapping","className","style","maxLines","rest","classes","classNameString","clsx","React"],"mappings":"wLACO,MAAMA,EAAa,CAExB,KAAM,CACJ,WAAYC,EAAkB,cAC9B,SAAUA,EAAkB,YAC5B,WAAY,SACZ,MAAOA,EAAkB,aACzB,QAAS,eACT,UAAW,aACX,WAAY,WACZ,SAAU,aACV,SAAU,OACV,eAAgB,CACd,WAAYA,EAAkB,iBAC9B,MAAOA,EAAkB,4BAC1B,CACF,EACD,iBAAkB,CAChB,WAAY,UACb,EACD,OAAQ,CACN,aAAc,WACd,WAAY,SACZ,SAAU,SACV,SAAU,SACV,qBAAsB,CACpB,WAAY,KACb,CACF,EACD,SAAU,CACR,QAAS,cACT,gBAAiB,WACjB,SAAU,SACV,gBAAiB,yBAClB,CACH,EC9BMC,EAAYC,EAAgBH,EAAY,CAC5C,KAAM,MACR,CAAC,EAKKI,EAAoBC,EAAU,WAAC,CAACC,EAAOC,IAAQ,CACnD,KAAM,CACJ,SAAAC,EACA,iBAAAC,EACA,SAAAC,EAAW,GACX,UAAAC,EACA,MAAAC,EACA,SAAAC,EACA,GAAGC,CACJ,EAAGR,EACES,EAAUb,IACVc,EAAkBC,EAAKF,EAAQ,KAAML,IAAa,IAASK,EAAQ,OAAQN,GAAoBM,EAAQ,iBAAkB,OAAOF,GAAa,UAAYE,EAAQ,SAAUJ,CAAS,EAC1L,OAAoBO,EAAM,cAAc,OAAQ,CAC9C,IAAKX,EACL,MAAO,CACL,qBAAsB,OAAOM,GAAa,SAAWA,EAAW,OAChE,GAAGD,CACJ,EACD,UAAWI,EACX,GAAGF,CACJ,EAAEN,CAAQ,CACb,CAAC,EACDJ,EAAK,YAAc","x_google_ignoreList":[0,1]}