import{r as n}from"./index-9BFB80ap.js";import{u as S}from"./useLatestRef-8OPiqaso.js";import{a as E,b as k,S as q}from"./CommonSelection-w2tAztTJ.js";import{j as D}from"./useIsomorphicLayoutEffect-xRq3KBKR.js";import"./search-Srqkuups.js";import{t as T,u as x}from"./util-5JWwSdnm.js";import{I as B}from"./index-DEsUDRQH.js";const z=s=>{const{inputValue:a,value:e,onInputChange:d,onValueChange:i,onBlur:p,forceSelection:f=!0}=s,[r,o]=n.useState(a!==void 0?a:""),[m,c]=n.useState(e!==void 0?e:void 0),I=S(m);n.useEffect(()=>{o(a??"")},[a,o]),n.useEffect(()=>{o(a??""),c(e)},[e,c]);const v=n.useCallback((l,C)=>{d!=null&&d(l,C),o(l)},[o,d]),g=n.useCallback((l,C)=>{i!=null&&i(l,C),c(l)},[c,i]),y=n.useCallback(l=>{p!=null&&p(l),f&&I.current==null&&l.currentTarget.value!=""&&o(""),!f&&I.current!==l.currentTarget.value&&g(l.currentTarget.value)},[c,p,g,f]);return{...s,inputValue:r,value:m,onInputChange:v,onValueChange:g,onBlur:y}},G=s=>{const{itemValue:a,itemLabel:e,...d}=s,i=n.useCallback(r=>{if(e){if(typeof e=="string")return r[e];if(typeof e=="function")return e(r)}return r[E]},[e]),p=n.useCallback(r=>{if(a){if(typeof a=="string")return r[a];if(typeof a=="function")return a(r)}return r[k]},[e]);return{...d,getItemLabel:i,getItemValue:p}},N=/[[\]{}()*+?.\\^$|]/g,U=s=>s.replace(N,"\\$&"),F=(s,a)=>new RegExp(`(^|\\s)${U(s.toLowerCase())}.*`,"g").test(a.toLowerCase()),R=n.forwardRef((s,a)=>{const{items:e=[],itemProps:d,getItemLabel:i,getItemValue:p,onInputChange:f,onValueChange:r,value:o,inputValue:m,filterItem:c,...I}=s,v=S(o),g=S(e),y=n.useMemo(()=>c===null?()=>!0:c??((t,u)=>F(t??"",i(u)??"")),[c,i]),l=n.useMemo(()=>e.filter(t=>t.__isNew__||y(m??"",t)),[m,e,y]),C=n.useCallback(t=>{var h,V;if(r==null)return;const u=t.detail.item;if(((h=u==null?void 0:u.dataset)==null?void 0:h.id)!=null){const P=(V=u==null?void 0:u.dataset)==null?void 0:V.id,_=g.current.find(O=>p(O)===P);_&&r(P,_)}},[r,p]),A=n.useCallback(t=>{const u=t.currentTarget.value;f!=null&&f(u,t),r!=null&&!g.current.find(V=>i(V)===u)&&v.current!=null&&r(void 0,void 0)},[f]),L=n.useCallback(t=>{T(t)},[]);let w=m??"";if(o!=null){const t=e.find(u=>p(u)===o);w=t==null?o:i(t)}const b=n.useRef();return n.useImperativeHandle(a,()=>b.current),x(b,o),D(B,{...I,value:w,ref:b,showSuggestions:!0,onInput:A,onSuggestionItemSelect:C,onKeyPress:L,children:l.map(t=>{const u=d?d(t):{},h=p(t),V=u.text||i(t);return n.createElement(q,{...u,key:h,"data-id":h,text:V})})})});try{R.displayName="CoreAutocomplete",R.__docgenInfo={description:"",displayName:"CoreAutocomplete",props:{name:{defaultValue:null,description:"Name of the input.",name:"name",required:!1,type:{name:"string"}},inputValue:{defaultValue:null,description:"Value shown on the input",name:"inputValue",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Selected suggested item",name:"value",required:!1,type:{name:"string"}},items:{defaultValue:null,description:"Suggestions to show",name:"items",required:!0,type:{name:"DefaultAutoCompleteOption[]"}},itemProps:{defaultValue:null,description:"Render <code>SuggestionItem</code>s from UI5.",name:"itemProps",required:!1,type:{name:"((item: DefaultAutoCompleteOption) => Partial<SuggestionItemPropTypes>)"}},getItemLabel:{defaultValue:null,description:`Controls which text is used to display options.
Used by suggestions, if not overridden
by <code>renderSuggestion</code>

By default the prop <code>label</code> is used.
You can pass either a string, which represents a different prop or a render function.`,name:"getItemLabel",required:!0,type:{name:"(item: DefaultAutoCompleteOption) => string"}},getItemValue:{defaultValue:null,description:`Controls which value / key is used to identify an option.
This is used by suggestions, if not overridden
by <code>renderSuggestion</code>.

By default the prop <code>value</code> is used.
You can pass either a string, which represents a different prop or a render function.`,name:"getItemValue",required:!0,type:{name:"(item: DefaultAutoCompleteOption) => string"}},onInputChange:{defaultValue:null,description:`Change handler that allows to access the new inputValue
@param inputValue updated input value
@param event event that lead to that change`,name:"onInputChange",required:!1,type:{name:"((inputValue: string, event: Ui5CustomEvent<InputDomRef, never>) => void)"}},onValueChange:{defaultValue:null,description:`Change handler that allows to access the new suggested item
Note: will be called in the future without item to reset the value
@param suggestionValue`,name:"onValueChange",required:!1,type:{name:"((value?: string, item?: DefaultAutoCompleteOption) => void) | undefined"}},filterItem:{defaultValue:null,description:`Custom filter method to display only items matching the search term.

Note: provide null to disable filtering
@param suggestionValue`,name:"filterItem",required:!1,type:{name:"((inputValue: string, item: DefaultAutoCompleteOption) => boolean) | null"}},forceSelection:{defaultValue:null,description:`If user doesn't select a suggested value, her input will be lost if this prop is set to true.
Default: true;`,name:"forceSelection",required:!1,type:{name:"boolean"}}}}}catch{}export{R as C,z as a,G as u};
//# sourceMappingURL=CoreAutocomplete-GmrZHgqm.js.map
