{"version":3,"file":"useCreatable-oCBfdz5P.js","sources":["../../src/component/autocomplete/hooks/useCreatable.ts"],"sourcesContent":["import { InputDomRef, Ui5CustomEvent } from \"@ui5/webcomponents-react\";\nimport { useCallback, useMemo } from \"react\";\n\nimport { useLatestRef } from \"../../../hook/useLatestRef\";\nimport {\n  CoreAutocompleteProps,\n  CreatedAutoCompleteOption,\n  DefaultAutoCompleteOption,\n} from \"../internal/CoreAutocomplete\";\n\nexport const isValidNewItem = <T = DefaultAutoCompleteOption>(\n  inputValue: string | undefined,\n  items: Array<T>,\n  getItemLabel: (item: T) => string\n) => {\n  return !(\n    !inputValue ||\n    items.some(\n      (item) =>\n        String(getItemLabel(item)).toLowerCase() ===\n        String(inputValue).toLowerCase()\n    )\n  );\n};\n\nconst defaultGetNewItem = <T = DefaultAutoCompleteOption>(\n  inputValue: string,\n  labelValue: string\n): T => {\n  const item: CreatedAutoCompleteOption = {\n    label: labelValue,\n    value: inputValue,\n    __isNew__: true,\n  };\n\n  return item as unknown as T;\n};\n\nexport const defaultFormatCreateLabel = (inputValue: string) =>\n  `Create \"${inputValue}\"`;\n\ntype UsedAutocompleteProps<TItemModel> = Pick<\n  CoreAutocompleteProps<TItemModel>,\n  | \"value\"\n  | \"inputValue\"\n  | \"items\"\n  | \"getItemLabel\"\n  | \"getItemValue\"\n  | \"onValueChange\"\n  | \"onInputChange\"\n>;\n\nexport interface UseCreatableAdditionalProps<TItemModel> {\n  /**\n   * Gets the label for the \"create new ...\" option in the menu. Is given the current input value.\n   * @param inputValue current input value\n   */\n  formatCreateLabel?: (inputValue: string) => string;\n  /**\n   * Returns the data for the new option when it is created.\n   *\n   * @param inputValue\n   * @param labelValue\n   */\n  getNewItem?: (inputValue: string, labelValue: string) => TItemModel;\n\n  /**\n   * If provided, this will be called with the input value when a new option is created. Use this when you need more control over what happens when new options are created.\n   *\n   * @param item item to create\n   */\n  onValueCreate?: (value: string, item: TItemModel) => void;\n}\n\ntype UseCreatableAdditionalPropKeys = keyof UseCreatableAdditionalProps<{}>;\n\nexport type UseCreatableProps<\n  TItemModel,\n  TAdditionalProps extends UsedAutocompleteProps<TItemModel>\n> = TAdditionalProps & UseCreatableAdditionalProps<TItemModel>;\n\nexport type UseCreatablePropsReturn<\n  TItemModel extends {},\n  TAdditionalProps extends UsedAutocompleteProps<TItemModel>\n> = Omit<TAdditionalProps, UseCreatableAdditionalPropKeys>;\n\nexport const useCreatable = <\n  TItemModel,\n  TAdditionalProps extends UsedAutocompleteProps<TItemModel>\n>(\n  props: UseCreatableProps<TItemModel, TAdditionalProps>\n): UseCreatablePropsReturn<TItemModel, TAdditionalProps> => {\n  const {\n    formatCreateLabel = defaultFormatCreateLabel,\n    getNewItem = defaultGetNewItem,\n    onValueCreate,\n    ...passThroughProps\n  } = props;\n\n  const {\n    items: originalItems,\n    value,\n    inputValue = \"\",\n    getItemLabel,\n    getItemValue,\n    onValueChange,\n    onInputChange,\n  } = props;\n\n  const newItem: TItemModel | undefined = useMemo(\n    () =>\n      isValidNewItem(inputValue, originalItems, getItemLabel)\n        ? getNewItem(\n            inputValue,\n            value === inputValue ? inputValue : formatCreateLabel(inputValue)\n          )\n        : undefined,\n    [\n      value,\n      formatCreateLabel,\n      getNewItem,\n      getItemLabel,\n      inputValue,\n      isValidNewItem,\n      originalItems,\n    ]\n  );\n  const newItemRef = useLatestRef<TItemModel | undefined>(newItem);\n\n  // todo new item position - start or first\n  // todo disable new option while loading\n  const items: Array<TItemModel> = useMemo(\n    () => (newItem != null ? [...originalItems, newItem] : originalItems),\n    [originalItems, newItem]\n  );\n\n  const handleInput = useCallback(\n    (inputValue: string, event: Ui5CustomEvent<InputDomRef>) => {\n      let inputValueCorrected = inputValue;\n      if (\n        newItemRef.current != null &&\n        getItemLabel(newItemRef.current) === inputValue\n      ) {\n        // new item was selected and placed into text field --> we need to replace create label with the original user value\n        const element = event.currentTarget as HTMLInputElement;\n        inputValueCorrected = getItemValue(newItemRef.current);\n        element.value = inputValueCorrected;\n      }\n\n      if (onInputChange != null) {\n        onInputChange(inputValueCorrected, event);\n      }\n    },\n    [getItemLabel, getItemValue]\n  );\n\n  const handleValueChange = useCallback(\n    (value?: string, item?: TItemModel) => {\n      if (value != null && item != null && item === newItem) {\n        // created item was selected\n        if (onValueCreate != null) {\n          onValueCreate(getItemValue(item), item);\n        }\n\n        if (onValueChange != null) {\n          onValueChange(value, getNewItem(value, value));\n        }\n        return;\n      }\n\n      // other items were selected\n      if (onValueChange != null) {\n        onValueChange(value, item);\n      }\n    },\n    [newItem, getNewItem, getItemValue, onValueChange, onValueCreate]\n  );\n\n  return {\n    ...passThroughProps,\n    items: items,\n    onValueChange: handleValueChange,\n    onInputChange: handleInput,\n  };\n};\n"],"names":["isValidNewItem","inputValue","items","getItemLabel","item","defaultGetNewItem","labelValue","defaultFormatCreateLabel","useCreatable","props","formatCreateLabel","getNewItem","onValueCreate","passThroughProps","originalItems","value","getItemValue","onValueChange","onInputChange","newItem","useMemo","newItemRef","useLatestRef","handleInput","useCallback","event","inputValueCorrected","element","handleValueChange"],"mappings":"uFAUO,MAAMA,EAAiB,CAC5BC,EACAC,EACAC,IAEO,EACL,CAACF,GACDC,EAAM,KACHE,GACC,OAAOD,EAAaC,CAAI,CAAC,EAAE,YAAA,IAC3B,OAAOH,CAAU,EAAE,YAAY,CAAA,GAKjCI,EAAoB,CACxBJ,EACAK,KAEwC,CACtC,MAAOA,EACP,MAAOL,EACP,UAAW,EAAA,GAMFM,EAA4BN,GACvC,WAAWA,CAAU,IA+CVO,EAIXC,GAC0D,CACpD,KAAA,CACJ,kBAAAC,EAAoBH,EACpB,WAAAI,EAAaN,EACb,cAAAO,EACA,GAAGC,CACD,EAAAJ,EAEE,CACJ,MAAOK,EACP,MAAAC,EACA,WAAAd,EAAa,GACb,aAAAE,EACA,aAAAa,EACA,cAAAC,EACA,cAAAC,CACE,EAAAT,EAEEU,EAAkCC,EAAA,QACtC,IACEpB,EAAeC,EAAYa,EAAeX,CAAY,EAClDQ,EACEV,EACAc,IAAUd,EAAaA,EAAaS,EAAkBT,CAAU,CAElE,EAAA,OACN,CACEc,EACAL,EACAC,EACAR,EACAF,EACAD,EACAc,CACF,CAAA,EAEIO,EAAaC,EAAqCH,CAAO,EAIzDjB,EAA2BkB,EAAA,QAC/B,IAAOD,GAAW,KAAO,CAAC,GAAGL,EAAeK,CAAO,EAAIL,EACvD,CAACA,EAAeK,CAAO,CAAA,EAGnBI,EAAcC,EAAA,YAClB,CAACvB,EAAoBwB,IAAuC,CAC1D,IAAIC,EAAsBzB,EAC1B,GACEoB,EAAW,SAAW,MACtBlB,EAAakB,EAAW,OAAO,IAAMpB,EACrC,CAEA,MAAM0B,EAAUF,EAAM,cACAC,EAAAV,EAAaK,EAAW,OAAO,EACrDM,EAAQ,MAAQD,CAClB,CAEIR,GAAiB,MACnBA,EAAcQ,EAAqBD,CAAK,CAE5C,EACA,CAACtB,EAAca,CAAY,CAAA,EAGvBY,EAAoBJ,EAAA,YACxB,CAACT,EAAgBX,IAAsB,CACrC,GAAIW,GAAS,MAAQX,GAAQ,MAAQA,IAASe,EAAS,CAEjDP,GAAiB,MACLA,EAAAI,EAAaZ,CAAI,EAAGA,CAAI,EAGpCa,GAAiB,MACnBA,EAAcF,EAAOJ,EAAWI,EAAOA,CAAK,CAAC,EAE/C,MACF,CAGIE,GAAiB,MACnBA,EAAcF,EAAOX,CAAI,CAE7B,EACA,CAACe,EAASR,EAAYK,EAAcC,EAAeL,CAAa,CAAA,EAG3D,MAAA,CACL,GAAGC,EACH,MAAAX,EACA,cAAe0B,EACf,cAAeL,CAAA,CAEnB"}