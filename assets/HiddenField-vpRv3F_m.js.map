{"version":3,"file":"HiddenField-vpRv3F_m.js","sources":["../../src/field/HiddenField.tsx"],"sourcesContent":["import {\n  FC,\n  MutableRefObject,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from \"react\";\nimport { useController } from \"react-hook-form\";\n\nimport { FormFieldElement } from \"./types\";\n\nexport interface HiddenFieldProps {\n  name: string;\n  // Note: using disabled to hide values within submit data is not supported in react hook form, yet\n  // see https://github.com/react-hook-form/react-hook-form/issues/2826\n  // disabled?: boolean;\n}\n\nexport const HiddenField: FC<HiddenFieldProps> = forwardRef<\n  FormFieldElement,\n  HiddenFieldProps\n>(({ name }, forwardedRef) => {\n  const { field } = useController({ name });\n\n  // store input ref for intenral usage\n  const internalRef = useRef<HTMLInputElement>();\n  // forward outer ref to custom element\n  useImperativeHandle(forwardedRef, () => ({\n    focus() {\n      if (internalRef.current != null) {\n        internalRef.current.focus();\n      }\n    },\n  }));\n  // forward field ref to stored internal input ref\n  useImperativeHandle(field.ref, () => internalRef.current);\n\n  return (\n    <input\n      {...field}\n      ref={internalRef as MutableRefObject<HTMLInputElement>}\n      type=\"hidden\"\n      value={field.value == null ? \"\" : field.value}\n    />\n  );\n});\n"],"names":["HiddenField","forwardRef","name","forwardedRef","field","useController","internalRef","useRef","useImperativeHandle","jsx"],"mappings":"wJAkBO,MAAAA,EAAAC,EAAAA,WAAA,CAAA,CAAA,KAAAC,CAAA,EAAAC,IAAA,CAIL,KAAA,CAAA,MAAAC,CAAA,EAAAC,EAAA,CAAA,KAAAH,CAAA,CAAA,EAGAI,EAAAC,EAAAA,SAEAC,OAAAA,EAAA,oBAAAL,EAAA,KAAA,CAAyC,OAAA,CAErCG,EAAA,SAAA,MACEA,EAAA,QAAA,OACF,CACF,EAAA,EAGFE,EAAAA,oBAAAJ,EAAA,IAAA,IAAAE,EAAA,OAAA,EAEAG,EACE,QAAC,CAAA,GAAAL,EACK,IAAAE,EACC,KAAA,SACA,MAAAF,EAAA,OAAA,KAAA,GAAAA,EAAA,KACmC,CAAA,CAG9C,CAAA"}