{"version":3,"file":"TextInputField-mcqueVzR.js","sources":["../../src/field/TextInputField.tsx"],"sourcesContent":["import \"../form/formSupport\";\n\nimport { InputDomRef, ValueState } from \"@ui5/webcomponents-react\";\nimport { forwardRef, useImperativeHandle, useMemo, useRef } from \"react\";\nimport { useController } from \"react-hook-form\";\n\nimport { TextInput, TextInputProps } from \"../component/TextInput\";\nimport { useI18nValidationError } from \"../i18n/FormI18n\";\nimport { FormFieldElement, FormFieldValidation } from \"./types\";\nimport { hasError } from \"./util\";\n\nexport type TextInputFieldProps = Omit<\n  TextInputProps,\n  \"name\" | \"value\" | \"onChange\" | \"valueState\" | \"onBlur\" | \"maxlength\"\n> &\n  Pick<FormFieldValidation, \"required\" | \"minLength\" | \"maxLength\"> & {\n    name: string;\n  };\n\nexport const TextInputField = forwardRef<FormFieldElement, TextInputFieldProps>(\n  ({ name, required, minLength, maxLength, ...props }, forwardedRef) => {\n    const rules: Partial<FormFieldValidation> = useMemo(\n      () => ({\n        required,\n        minLength,\n        maxLength,\n      }),\n      [required, minLength, maxLength]\n    );\n\n    const getValidationErrorMessage = useI18nValidationError(name, rules);\n\n    const { field, fieldState } = useController({\n      name: name,\n      rules,\n    });\n\n    // store input ref for intenral usage\n    const inputRef = useRef<InputDomRef>(null);\n    // forward outer ref to custom element\n    useImperativeHandle(forwardedRef, () => ({\n      focus() {\n        if (inputRef.current != null) {\n          inputRef.current.focus();\n        }\n      },\n    }));\n    // forward field ref to stored internal input ref\n    useImperativeHandle(field.ref, () => inputRef.current);\n\n    // use empty string to reset value, undefined will be ignored by web component\n    const value = field.value === undefined ? \"\" : field.value;\n\n    // get error message (Note: undefined fallbacks to default message of ui5 component)\n    const errorMessage = hasError(fieldState.error)\n      ? getValidationErrorMessage(fieldState.error, field.value)\n      : undefined;\n\n    return (\n      <TextInput\n        {...props}\n        ref={inputRef}\n        name={field.name}\n        value={value}\n        onChange={field.onChange}\n        onBlur={field.onBlur}\n        valueState={\n          hasError(fieldState.error) ? ValueState.Error : ValueState.None\n        }\n        valueStateMessage={\n          errorMessage != null && (\n            <div slot=\"valueStateMessage\">{errorMessage}</div>\n          )\n        }\n        required={required}\n        maxlength={\n          maxLength != null\n            ? typeof maxLength === \"number\"\n              ? maxLength\n              : maxLength.value\n            : undefined\n        }\n      />\n    );\n  }\n);\n"],"names":["TextInputField","forwardRef","name","required","minLength","maxLength","props","forwardedRef","rules","useMemo","getValidationErrorMessage","useI18nValidationError","field","fieldState","useController","inputRef","useRef","useImperativeHandle","value","errorMessage","hasError","jsx","TextInput","ValueState"],"mappings":"qWAmBO,MAAAA,EAAAC,EAAA,WAAuB,CAAA,CAAA,KAAAC,EAAA,SAAAC,EAAA,UAAAC,EAAA,UAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAE1B,MAAAC,EAAAC,EAAA,QAA4C,KAAA,CACnC,SAAAN,EACL,UAAAC,EACA,UAAAC,CACA,GACF,CAAAF,EAAAC,EAAAC,CAAA,CAC+B,EAGjCK,EAAAC,EAAAT,EAAAM,CAAA,EAEA,CAAA,MAAAI,EAAA,WAAAC,CAAA,EAAAC,EAAA,CAA4C,KAAAZ,EAC1C,MAAAM,CACA,CAAA,EAIFO,EAAAC,SAAA,IAAA,EAEAC,EAAA,oBAAAV,EAAA,KAAA,CAAyC,OAAA,CAErCQ,EAAA,SAAA,MACEA,EAAA,QAAA,OACF,CACF,EAAA,EAGFE,EAAAA,oBAAAL,EAAA,IAAA,IAAAG,EAAA,OAAA,EAGA,MAAAG,EAAAN,EAAA,QAAA,OAAA,GAAAA,EAAA,MAGAO,EAAAC,EAAAP,EAAA,KAAA,EAAAH,EAAAG,EAAA,MAAAD,EAAA,KAAA,EAAA,OAIA,OAAAS,EACEC,EAAC,CAAA,GAAAhB,EACK,IAAAS,EACC,KAAAH,EAAA,KACO,MAAAM,EACZ,SAAAN,EAAA,SACgB,OAAAA,EAAA,OACF,WAAAQ,EAAAP,EAAA,KAAA,EAAAU,EAAA,MAAAA,EAAA,KAE+C,kBAAAJ,GAAA,MAAAE,EAAA,MAAA,CAAA,KAAA,oBAAA,SAAAF,EAAA,EAIb,SAAAhB,EAGhD,UAAAE,GAAA,KAAA,OAAAA,GAAA,SAAAA,EAAAA,EAAA,MAAA,MAMM,CAAA,CAER,CAGN"}