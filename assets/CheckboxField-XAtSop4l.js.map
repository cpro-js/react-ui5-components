{"version":3,"file":"CheckboxField-XAtSop4l.js","sources":["../../src/field/CheckboxFieldGroup.tsx","../../src/field/CheckboxField.tsx"],"sourcesContent":["import \"../form/formSupport\";\n\nimport { FC, createContext, forwardRef } from \"react\";\n\nimport { CheckboxFieldProps } from \"./CheckboxField\";\n\nexport interface CheckboxFieldGroupContextProps\n  extends ForwardedCheckboxFieldProps {}\n\nexport const CheckboxFieldGroupContext = createContext<\n  CheckboxFieldGroupContextProps | undefined\n>(undefined);\n\nexport interface ForwardedCheckboxFieldProps\n  extends Omit<CheckboxFieldProps, \"boolean\" | \"value\" | \"text\"> {}\n\nexport interface CheckboxFieldGroupProps extends ForwardedCheckboxFieldProps {}\n\nexport const CheckboxFieldGroup: FC<CheckboxFieldGroupProps> = forwardRef(\n  ({ children, ...props }, _ref) => {\n    return (\n      <CheckboxFieldGroupContext.Provider value={props}>\n        {children}\n      </CheckboxFieldGroupContext.Provider>\n    );\n  }\n);\n","import \"../form/formSupport\";\n\nimport { CheckBoxDomRef, ValueState } from \"@ui5/webcomponents-react\";\nimport {\n  ChangeEvent,\n  FC,\n  forwardRef,\n  useContext,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { useController, useFormContext } from \"react-hook-form\";\n\nimport { Checkbox, CheckboxProps } from \"../component/Checkbox\";\nimport { CheckboxFieldGroupContext } from \"./CheckboxFieldGroup\";\nimport { FormFieldElement, FormFieldValidation } from \"./types\";\nimport { hasError } from \"./util\";\n\nexport const MISSING_NAME = \"CHECKBOX_NAME_IS_MISSING\";\n\nexport type CheckboxFieldProps = Omit<\n  CheckboxProps,\n  | \"name\"\n  | \"checked\"\n  | \"defaultChecked\"\n  | \"defaultValue\"\n  | \"onChange\"\n  | \"valueState\"\n  | \"onBlur\"\n> &\n  Pick<FormFieldValidation, \"required\"> & {\n    /**\n     * Name is optional within CheckboxFieldGroup\n     */\n    name?: string;\n    boolean?: boolean;\n  };\n\nexport const CheckboxField = forwardRef<FormFieldElement, CheckboxFieldProps>(\n  ({ name, value = \"on\", boolean, required, ...props }, forwardedRef) => {\n    const { setValue, getValues } = useFormContext<any>(); // retrieve all hook methods\n    const checkboxGroupProps = useContext(CheckboxFieldGroupContext);\n    const isMultiValue = checkboxGroupProps != null;\n    const checkboxName =\n      name != null\n        ? name\n        : checkboxGroupProps?.name != null\n        ? checkboxGroupProps.name\n        : MISSING_NAME;\n    const checkboxRequired =\n      required != null ? required : checkboxGroupProps?.required;\n\n    const rules: Partial<FormFieldValidation> = useMemo(\n      () => ({\n        required: checkboxRequired,\n      }),\n      [checkboxRequired]\n    );\n\n    const { field, fieldState } = useController({\n      name: checkboxName,\n      rules,\n    });\n\n    // store input ref for intenral usage\n    const internalRef = useRef<CheckBoxDomRef>(null);\n    // forward outer ref to custom element\n    useImperativeHandle(forwardedRef, () => ({\n      focus() {\n        if (internalRef.current != null) {\n          internalRef.current.focus();\n        }\n      },\n    }));\n    // forward field ref to stored internal input ref\n    useImperativeHandle(field.ref, () => internalRef.current);\n\n    const checked = isMultiValue\n      ? !Array.isArray(field.value)\n        ? false\n        : (field.value as Array<string>).indexOf(value) !== -1\n      : boolean\n      ? field.value\n      : field.value === value;\n\n    return (\n      <Checkbox\n        {...checkboxGroupProps}\n        {...props}\n        ref={internalRef}\n        name={field.name}\n        value={value}\n        checked={checked}\n        onChange={(event: ChangeEvent<HTMLInputElement>) => {\n          let updatedValue: any = event.target.checked\n            ? event.target.value\n            : undefined;\n          if (isMultiValue) {\n            const actualValues = getValues(field.name);\n            updatedValue = (Array.isArray(actualValues) ? actualValues : [])\n              .filter((v) => event.target.value !== v)\n              .concat(event.target.checked ? [event.target.value] : []);\n          } else if (boolean) {\n            updatedValue = event.target.checked;\n          }\n          // call field onChange listener to update values and trigger validations if necessary\n          field.onChange(updatedValue);\n          //  ensure that the value is is internally set correctly (onChange does something weird while persisting values)\n          setValue(field.name, updatedValue);\n        }}\n        valueState={\n          hasError(fieldState.error) ? ValueState.Error : ValueState.None\n        }\n        onBlur={field.onBlur}\n      />\n    );\n  }\n);\n"],"names":["CheckboxFieldGroupContext","createContext","CheckboxFieldGroup","forwardRef","children","props","_ref","jsx","MISSING_NAME","CheckboxField","name","value","boolean","required","forwardedRef","setValue","getValues","useFormContext","checkboxGroupProps","useContext","isMultiValue","checkboxName","checkboxRequired","rules","useMemo","field","fieldState","useController","internalRef","useRef","useImperativeHandle","checked","Checkbox","event","updatedValue","actualValues","v","hasError","ValueState"],"mappings":"2TASO,MAAAA,EAAAC,EAAAA,cAAA,MAAA,EASAC,EAAAC,EAAA,WAAwD,CAAA,CAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAE3DC,EAAAP,EAAA,SAAA,CAAA,MAAAK,EAAA,SAAAD,CAAA,CAAA,CAMJ,wPCPO,MAAAI,EAAA,2BAoBAC,EAAAN,EAAA,WAAsB,CAAA,CAAA,KAAAO,EAAA,MAAAC,EAAA,KAAA,QAAAC,EAAA,SAAAC,EAAA,GAAAR,CAAA,EAAAS,IAAA,CAEzB,KAAA,CAAA,SAAAC,EAAA,UAAAC,CAAA,EAAAC,EAAA,EACAC,EAAAC,aAAAnB,CAAA,EACAoB,EAAAF,GAAA,KACAG,EAAAX,KAAAQ,GAAA,YAAAA,EAAA,OAAA,KAAAA,EAAA,KAAAV,GAMAc,EAAAT,IAAAK,GAAA,YAAAA,EAAA,UAGAK,EAAAC,EAAA,QAA4C,KAAA,CACnC,SAAAF,CACK,GACZ,CAAAA,CAAA,CACiB,EAGnB,CAAA,MAAAG,EAAA,WAAAC,CAAA,EAAAC,EAAA,CAA4C,KAAAN,EACpC,MAAAE,CACN,CAAA,EAIFK,EAAAC,SAAA,IAAA,EAEAC,EAAA,oBAAAhB,EAAA,KAAA,CAAyC,OAAA,CAErCc,EAAA,SAAA,MACEA,EAAA,QAAA,OACF,CACF,EAAA,EAGFE,EAAAA,oBAAAL,EAAA,IAAA,IAAAG,EAAA,OAAA,EAEA,MAAAG,EAAAX,EAAA,MAAA,QAAAK,EAAA,KAAA,EAAAA,EAAA,MAAA,QAAAd,CAAA,IAAA,GAAA,GAAAC,EAAAa,EAAA,MAAAA,EAAA,QAAAd,EAQA,OAAAJ,EACEyB,EAAC,CAAA,GAAAd,EACK,GAAAb,EACA,IAAAuB,EACC,KAAAH,EAAA,KACO,MAAAd,EACZ,QAAAoB,EACA,SAAAE,GAAA,CAEE,IAAAC,EAAAD,EAAA,OAAA,QAAAA,EAAA,OAAA,MAAA,OAGA,GAAAb,EAAA,CACE,MAAAe,EAAAnB,EAAAS,EAAA,IAAA,EACAS,GAAA,MAAA,QAAAC,CAAA,EAAAA,EAAA,CAAA,GAAA,OAAAC,GAAAH,EAAA,OAAA,QAAAG,CAAA,EAAA,OAAAH,EAAA,OAAA,QAAA,CAAAA,EAAA,OAAA,KAAA,EAAA,CAAA,CAAA,CAE0D,MAAArB,IAE1DsB,EAAAD,EAAA,OAAA,SAGFR,EAAA,SAAAS,CAAA,EAEAnB,EAAAU,EAAA,KAAAS,CAAA,CAAiC,EACnC,WAAAG,EAAAX,EAAA,KAAA,EAAAY,EAAA,MAAAA,EAAA,KAE6D,OAAAb,EAAA,MAE/C,CAAA,CAChB,CAGN"}