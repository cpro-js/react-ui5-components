{"version":3,"file":"Checkbox-kdA6EdF0.js","sources":["../../../../node_modules/@ui5/webcomponents-react/dist/webComponents/CheckBox/index.js","../../src/component/Checkbox.tsx"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents/dist/CheckBox.js';\nimport { ValueState } from '../../enums/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\n/**\n * Allows the user to set a binary value, such as true/false or yes/no for an item.\n *\n * The `CheckBox` component consists of a box and a label that describes its purpose. If it's checked, an indicator is displayed inside the box. To check/uncheck the `CheckBox`, the user has to click or tap the square box or its label.\n *\n * The `CheckBox` component only has 2 states - checked and unchecked. Clicking or tapping toggles the `CheckBox` between checked and unchecked state.\n *\n * __Note:__ This component is a web component developed by the UI5 Web Componentsâ€™ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/main-CheckBox)\n */\nconst CheckBox = withWebComponent('ui5-checkbox', ['accessibleName', 'accessibleNameRef', 'name', 'text', 'valueState', 'wrappingType'], ['checked', 'disabled', 'indeterminate', 'readonly', 'required'], [], ['change']);\nCheckBox.displayName = 'CheckBox';\nCheckBox.defaultProps = {\n  valueState: ValueState.None\n};\nexport { CheckBox };","import {\n  CheckBoxDomRef,\n  CheckBoxPropTypes,\n  CheckBox as UI5Checkbox,\n  Ui5CustomEvent,\n} from \"@ui5/webcomponents-react\";\nimport {\n  ChangeEvent,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nexport interface CheckboxProps extends Omit<CheckBoxPropTypes, \"onChange\"> {\n  /**\n   * The value of the component. The DOM API casts this to a string. The browser uses \"on\" as the default value.\n   */\n  value?: string;\n  /**\n   * HTML checkbox compliant event handler (except that the input type is hidden instead of checkbox)\n   * @param event\n   */\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Checkbox wrapper to transform the UI5 checkbox into a HTML compliant checkbox\n */\nexport const Checkbox = forwardRef<CheckBoxDomRef, CheckboxProps>(\n  (\n    { name, value = \"on\", checked, disabled, onChange, ...props },\n    forwardedRef\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [isChecked, setChecked] = useState<boolean | undefined>(checked);\n\n    const handleChange = useCallback(\n      (\n        event: Ui5CustomEvent<CheckBoxDomRef> | ChangeEvent<HTMLInputElement>\n      ) => {\n        if (inputRef.current != null && inputRef.current !== event.target) {\n          setChecked(event.target.checked);\n          inputRef.current.disabled = !event.target.checked;\n          inputRef.current.checked = !!event.target.checked;\n\n          const customEvent = new Event(\"change\", {\n            bubbles: true,\n            cancelable: true,\n          });\n\n          inputRef.current.dispatchEvent(customEvent);\n        }\n\n        if (inputRef.current === event.target) {\n          // use only the change event of the internal input\n          onChange(event as ChangeEvent<HTMLInputElement>);\n        }\n      },\n      [setChecked, onChange]\n    );\n\n    // sync external changes back to input\n    useEffect(() => {\n      setChecked(checked);\n    }, [setChecked, checked]);\n\n    // Note input type checkbox will be only submitted as part of the form if it's checked\n    // That's why we disable the input in unchecked state to prevent it from being submitted\n    return (\n      <UI5Checkbox\n        {...props}\n        ref={forwardedRef}\n        checked={isChecked}\n        disabled={disabled}\n        onChange={handleChange}\n      >\n        <input\n          ref={inputRef}\n          type=\"hidden\"\n          disabled={disabled || !isChecked}\n          name={name}\n          value={value}\n          checked={isChecked}\n          readOnly\n        />\n      </UI5Checkbox>\n    );\n  }\n);\n"],"names":["CheckBox","withWebComponent","ValueState","Checkbox","forwardRef","name","value","checked","disabled","onChange","props","forwardedRef","inputRef","useRef","isChecked","setChecked","useState","handleChange","useCallback","event","customEvent","useEffect","jsx","UI5Checkbox"],"mappings":"mOAgBA,MAAMA,EAAWC,EAAiB,eAAgB,CAAC,iBAAkB,oBAAqB,OAAQ,OAAQ,aAAc,cAAc,EAAG,CAAC,UAAW,WAAY,gBAAiB,WAAY,UAAU,EAAG,CAAE,EAAE,CAAC,QAAQ,CAAC,EACzND,EAAS,YAAc,WACvBA,EAAS,aAAe,CACtB,WAAYE,EAAW,IACzB,ECUO,MAAAC,EAAAC,EAAA,WAAiB,CAAA,CAAA,KAAAC,EAAA,MAAAC,EAAA,KAAA,QAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAKpB,MAAAC,EAAAC,SAAA,IAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAT,CAAA,EAEAU,EAAAC,EAAA,YAAqBC,GAAA,CAIjB,GAAAP,EAAA,SAAA,MAAAA,EAAA,UAAAO,EAAA,OAAA,CACEJ,EAAAI,EAAA,OAAA,OAAA,EACAP,EAAA,QAAA,SAAA,CAAAO,EAAA,OAAA,QACAP,EAAA,QAAA,QAAA,CAAA,CAAAO,EAAA,OAAA,QAEA,MAAAC,EAAA,IAAA,MAAA,SAAA,CAAwC,QAAA,GAC7B,WAAA,EACG,CAAA,EAGdR,EAAA,QAAA,cAAAQ,CAAA,CAA0C,CAG5CR,EAAA,UAAAO,EAAA,QAEEV,EAAAU,CAAA,CACF,EACF,CAAAJ,EAAAN,CAAA,CACqB,EAIvBY,OAAAA,EAAAA,UAAA,IAAA,CACEN,EAAAR,CAAA,CAAkB,EAAA,CAAAQ,EAAAR,CAAA,CAAA,EAKpBe,EACEC,EAAC,CAAA,GAAAb,EACK,IAAAC,EACC,QAAAG,EACI,SAAAN,EACT,SAAAS,EACU,SAAAK,EAEV,QAAC,CAAA,IAAAV,EACM,KAAA,SACA,SAAAJ,GAAA,CAAAM,EACkB,KAAAT,EACvB,MAAAC,EACA,QAAAQ,EACS,SAAA,EACD,CAAA,CACV,CAAA,CACF,CAGN;","x_google_ignoreList":[0]}