{"version":3,"file":"useFormController-QYTj16FN.js","sources":["../../../../node_modules/react-hook-form/dist/index.esm.mjs","../../src/form/context/FormActionContext.ts","../../src/form/FormProvider.tsx","../../../../node_modules/klona/json/index.mjs","../../src/form/useFormController.tsx"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, props.children));\r\n};\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    const _mounted = React.useRef(true);\r\n    _name.current = name;\r\n    const callback = React.useCallback((value) => _mounted.current &&\r\n        shouldSubscribeByName(_name.current, value.name, exact) &&\r\n        shouldRenderFormState(value, _localProxyFormState.current) &&\r\n        updateFormState({\r\n            ...control._formState,\r\n            ...value,\r\n        }), [control, exact]);\r\n    useSubscribe({\r\n        disabled,\r\n        callback,\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const callback = React.useCallback((formState) => {\r\n        if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n            const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n            updateValue(isUndefined(_name.current) ||\r\n                (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                ? { ...fieldValues }\r\n                : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : isUndefined(fieldValues)\r\n                        ? defaultValue\r\n                        : fieldValues);\r\n        }\r\n    }, [control, exact, defaultValue]);\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback,\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => {\r\n                _registerProps.current.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            }, [name]),\r\n            onBlur: React.useCallback(() => {\r\n                _registerProps.current.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            }, [name, control]),\r\n            ref: React.useCallback((elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            }, [name, control._fields]),\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            copy[key] = isFunction(data[key]) ? data[key] : cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => !isUndefined(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            control._executeSchema([name]).then((result) => {\r\n                const error = get(result.errors, name);\r\n                const existingError = get(control._formState.errors, name);\r\n                if (existingError ? !error && existingError.type : error && error.type) {\r\n                    error\r\n                        ? set(control._formState.errors, name, error)\r\n                        : unset(control._formState.errors, name);\r\n                    control._subjects.state.next({\r\n                        errors: control._formState.errors,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (required &&\r\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n            (isBoolean(inputValue) && !inputValue) ||\r\n            (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n            (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber || +inputValue;\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback, wait) => (...args) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(() => callback(...args), wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuildInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => (set(_formState.errors, name, error),\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        }));\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback =\r\n                delayErrorCallback || debounce(updateErrors, props.delayError);\r\n            delayErrorCallback(name, error);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) &&\r\n            !shouldSkipRender) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuildInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f: fieldReference, ...fieldValue } = field;\r\n                if (fieldReference) {\r\n                    const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\r\n                    if (fieldError[fieldReference.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!shouldOnlyCheckValid) {\r\n                        fieldError[fieldReference.name]\r\n                            ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name])\r\n                            : unset(_formState.errors, fieldReference.name);\r\n                    }\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => !checkboxRef.disabled &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(false, name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuildInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuildInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuildInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                isHTMLElement(fieldReference) &&\r\n                                    fieldReference.closest('form').reset();\r\n                                break;\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name)._f;\r\n        const fieldRef = field.refs ? field.refs[0] : field.ref;\r\n        options.shouldSelect ? fieldRef.select() : fieldRef.focus();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to mange the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    const callback = React.useCallback((value) => {\r\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n            control._formState = {\r\n                ...control._formState,\r\n                ...value,\r\n            };\r\n            updateFormState({ ...control._formState });\r\n        }\r\n    }, [control]);\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback,\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { createContext } from \"react\";\n\nimport { FormActions } from \"../../field/types\";\n\nconst noop = () => undefined;\n\nexport const FormActionContext = createContext<FormActions<any>>({\n  setErrors: noop,\n  setValues: noop,\n  reset: noop,\n  clear: noop,\n  submit: noop,\n});\n","import * as React from \"react\";\nimport { ReactNode, useMemo } from \"react\";\nimport { FormProvider as ReactHookFormProvider } from \"react-hook-form\";\n\nimport { FormActions } from \"../field/types\";\nimport { FormActionContext } from \"./context/FormActionContext\";\nimport { UseFormControllerReturn } from \"./useFormController\";\n\nexport interface FormProviderProps<FormValues extends {}>\n  extends UseFormControllerReturn<FormValues> {\n  children?: ReactNode | undefined;\n}\n\nexport function FormProvider<FormValues extends {}>(\n  props: FormProviderProps<FormValues>\n) {\n  const { context, children, setErrors, setValues, reset, clear, submit } =\n    props;\n\n  const formActions: FormActions<FormValues> = useMemo(\n    () => ({\n      setErrors: setErrors,\n      setValues: setValues,\n      reset: reset,\n      clear: clear,\n      submit: submit,\n    }),\n    []\n  );\n\n  return (\n    <ReactHookFormProvider {...context}>\n      <FormActionContext.Provider value={formActions}>\n        {children}\n      </FormActionContext.Provider>\n    </ReactHookFormProvider>\n  );\n}\n","export function klona(val) {\n\tvar k, out, tmp;\n\n\tif (Array.isArray(val)) {\n\t\tout = Array(k=val.length);\n\t\twhile (k--) out[k] = (tmp=val[k]) && typeof tmp === 'object' ? klona(tmp) : tmp;\n\t\treturn out;\n\t}\n\n\tif (Object.prototype.toString.call(val) === '[object Object]') {\n\t\tout = {}; // null\n\t\tfor (k in val) {\n\t\t\tif (k === '__proto__') {\n\t\t\t\tObject.defineProperty(out, k, {\n\t\t\t\t\tvalue: klona(val[k]),\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tout[k] = (tmp=val[k]) && typeof tmp === 'object' ? klona(tmp) : tmp;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\treturn val;\n}\n","import { klona } from \"klona/json\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport {\n  SubmitHandler as HookFormSubmitHandler,\n  UseFormReturn,\n  useForm,\n} from \"react-hook-form\";\nimport { DefaultValues } from \"react-hook-form/dist/types/form\";\n\nimport {\n  FormActionClearForm,\n  FormActionResetForm,\n  FormActionSetErrors,\n  FormActionSetValues,\n  FormActionSubmitForm,\n  FormActions,\n  FormSubmitHandler,\n  PartialFormValues,\n} from \"../field/types\";\n\nconst noop = () => undefined;\n\nexport interface UseFormControllerProps<FormValues extends {}> {\n  initialValues?: PartialFormValues<FormValues>;\n  onSubmit: FormSubmitHandler<FormValues>;\n}\n\nexport interface UseFormControllerReturn<FormValues extends {}> {\n  /**\n   * React hook form context\n   */\n  context: UseFormReturn<FormValues>;\n  handleSubmit: (e?: React.BaseSyntheticEvent) => void | Promise<void>;\n  handleReset: () => void;\n  setErrors: FormActionSetErrors<FormValues>;\n  setValues: FormActionSetValues<FormValues>;\n  reset: FormActionResetForm<FormValues>;\n  clear: FormActionClearForm<FormValues>;\n  submit: FormActionSubmitForm<FormValues>;\n}\n\nexport function useFormController<FormValues extends {}>(\n  props: UseFormControllerProps<FormValues>\n): UseFormControllerReturn<FormValues> {\n  const { initialValues, onSubmit } = props;\n\n  // store initial values & deep clone initial values to bypass mutations\n  const initialValuesRef = useRef<typeof initialValues>(\n    initialValues != null ? klona(initialValues) : undefined\n  );\n\n  const form = useForm<FormValues>({\n    defaultValues: initialValuesRef.current as DefaultValues<FormValues>,\n    mode: \"onTouched\", // Validation will trigger on the first blur event. After that, it will trigger on every change event.\n    reValidateMode: \"onChange\", // Validation will trigger on the change event with each input, and lead to multiple re-renders.\n    criteriaMode: \"firstError\",\n    shouldUnregister: false,\n  });\n\n  const { handleSubmit, reset, trigger, setValue, setError, setFocus } = form;\n\n  const actions = useRef<FormActions<FormValues>>({\n    setErrors: noop,\n    setValues: noop,\n    reset: noop,\n    clear: noop,\n    submit: noop,\n  });\n\n  const setErrors: FormActionSetErrors<FormValues> = useCallback(\n    (errors, config) => {\n      if (errors.length > 0) {\n        errors.forEach(({ name, message }) => {\n          setError(\n            name,\n            {\n              type: \"external-error\",\n              message: message,\n            },\n            { shouldFocus: false }\n          );\n        });\n\n        if (config?.shouldFocus) {\n          // TODO is there any way to ensure that the error order matches the input order?\n          setFocus(errors[0].name);\n        }\n      }\n    },\n    [setError, setFocus]\n  );\n\n  const setValues: FormActionSetValues<FormValues> = useCallback(\n    (values, options) => {\n      values.forEach(({ name, value }) => {\n        setValue(name, value, {\n          shouldValidate: options?.shouldValidate ?? false,\n          shouldDirty: options?.shouldDirty ?? false,\n          shouldTouch: options?.shouldTouch,\n        });\n      });\n    },\n    [setValue]\n  );\n\n  const resetForm: FormActionResetForm<FormValues> = useCallback(() => {\n    if (initialValuesRef.current != null) {\n      reset(initialValuesRef.current as DefaultValues<FormValues>);\n    } else {\n      reset();\n    }\n  }, [reset]);\n\n  const clearForm: FormActionClearForm<FormValues> = useCallback(() => {\n    reset({} as DefaultValues<FormValues>);\n  }, [reset]);\n\n  const submitHandler: HookFormSubmitHandler<FormValues> = useCallback(\n    async (data) => {\n      // need to trigger validation to ensure everything is really ok\n      const valid = await trigger();\n\n      if (valid) {\n        // call submit\n        return onSubmit(data as FormValues, actions.current);\n      }\n    },\n    [trigger, onSubmit]\n  );\n\n  const submitForm = useMemo(\n    () => handleSubmit(submitHandler),\n    [handleSubmit, submitHandler]\n  );\n\n  useEffect(() => {\n    // refresh action ref if any of our methods changes\n    actions.current = {\n      setErrors: setErrors,\n      setValues: setValues,\n      reset: resetForm,\n      clear: clearForm,\n      submit: submitForm,\n    };\n  }, [setErrors, setValues, resetForm, clearForm, submitForm]);\n\n  return {\n    context: form,\n    handleReset: resetForm,\n    handleSubmit: submitForm,\n    setErrors: setErrors,\n    setValues: setValues,\n    reset: resetForm,\n    clear: clearForm,\n    submit: submitForm,\n  };\n}\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","compact","isUndefined","val","get","obj","path","defaultValue","result","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","FormProvider","props","children","data","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","convertToArrayPayload","shouldSubscribeByName","signalName","exact","currentName","useSubscribe","_props","tearDown","subscription","useFormState","methods","control","disabled","updateFormState","_localProxyFormState","_name","_mounted","callback","isString","generateWatchOutput","_names","formValues","isGlobal","isArray","fieldName","isFunction","objectHasFunction","useWatch","fieldValues","updateValue","useController","shouldUnregister","isArrayField","_registerProps","updateMounted","field","_shouldUnregisterField","elm","message","appendErrors","validateAllFieldCriteria","errors","type","isKey","stringToPath","input","set","object","index","tempPath","length","lastIndex","newValue","objValue","focusFieldBy","fields","fieldsNames","_f","currentField","isWatched","isBlurEvent","watchName","isWeb","cloneObject","copy","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observer","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","getValidationModes","mode","isBoolean","isFileInput","isHTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckbox","ref","live","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","validResult","getCheckboxValue","options","values","option","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","defaultReturn","getRadioValue","previous","getFieldValue","getResolverOptions","_fields","criteriaMode","shouldUseNativeValidation","isRegex","getRuleValue","rule","hasValidation","schemaErrorLookup","error","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","getValidateError","getValueAndMessage","validationData","validateField","inputValue","refs","required","maxLength","minLength","min","max","pattern","validate","mount","inputRef","setCustomValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueNumber","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_stateFlags","delayErrorCallback","timer","validateFields","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","_updateValid","shouldSkipRender","isValid","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldUpdateFieldsAndState","touchedFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","updatedFormState","v","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","fieldReference","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","selectRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","onChange","target","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","getFieldState","clearErrors","inputName","setError","watch","info","register","disabledIsDefined","fieldRef","radioOrCheckbox","onValid","onInvalid","e","hasNoPromiseError","err","keepStateOptions","updatedValues","cloneUpdatedValues","useForm","_formControl","noop","FormActionContext","createContext","setErrors","reset","clear","submit","formActions","useMemo","jsx","ReactHookFormProvider","klona","out","tmp","useFormController","initialValues","onSubmit","initialValuesRef","useRef","form","handleSubmit","setFocus","actions","useCallback","config","resetForm","clearForm","submitHandler","submitForm","useEffect"],"mappings":"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","x_google_ignoreList":[0,3]}